{"version":3,"sources":["src/engine/browser-window.ts","src/engine/world.ts","src/engine/index.ts","src/engine/geometry/point2d.ts","src/engine/physics/peg.ts","src/engine/view/sprite.ts","src/flock/bird.ts","src/flock/hunter.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.36efc678.map","sourceRoot":"..","sourcesContent":["export default class BrowserWindow {\n  private _htmlDocument : HTMLElement;\n  private _viewportWidth : number;\n  private _viewportHeight : number;\n  private _viewportRatio : number;\n\n  constructor() {\n    this._htmlDocument = document.documentElement;\n    this.update();\n  }\n\n  get viewportWidth() : number { return this._viewportWidth };\n  get viewportHeight() : number { return this._viewportHeight };\n  get viewportRatio() : number { return this._viewportRatio };\n\n  public update() : void {\n    this._viewportWidth = this._htmlDocument.clientWidth;\n    this._viewportHeight = this._htmlDocument.clientHeight;\n    this._viewportRatio = this._viewportHeight / this.viewportWidth;\n  }\n}\n","import { Item } from './interfaces';\n\nexport default class World {\n  static readonly ALL_ITEMS = '__all__';\n\n  private items: Map<String, Array<Item>>;\n\n  constructor() {\n    this.items = new Map();\n    this.items.set(World.ALL_ITEMS, []);\n  }\n\n  addItem(item: Item, tags: Array<String>): void {\n    this.items.get(World.ALL_ITEMS).push(item);\n\n    for (const tag of tags) {\n      const tagList: Array<Item> = this.items.get(tag);\n      if (tagList) {\n        tagList.push(item)\n      } else {\n        this.items.set(tag, [item]);\n      }\n    }\n  }\n\n  getItems(tag: String = World.ALL_ITEMS): Array<Item> {\n    return this.items.get(tag);\n  }\n}\n","import BrowserWindow from './browser-window';\nimport World from './world';\n\nimport { Item } from './interfaces';\n\nexport default class Engine {\n  private browserWindow: BrowserWindow;\n  private world: World;\n\n  constructor() {\n    this.browserWindow = new BrowserWindow();\n    this.world = new World();\n  }\n\n  spawn(item: Item, tags: Array<String> = []): Engine {\n    item.world = this.world;\n    this.world.addItem(item, tags);\n\n    return this;\n  }\n\n  start(): void {\n    const loop = (timestamp: number): void => {\n      this.browserWindow.update();\n\n      this\n        .update(timestamp - lastRender)\n        .render();\n\n      lastRender = timestamp;\n      window.requestAnimationFrame(loop);\n    };\n\n    let lastRender = 0;\n    window.requestAnimationFrame(loop);\n  }\n\n  // private --------\n\n  private update(step: number): Engine {\n    for (const item of this.world.getItems()) {\n      item.update(step, this.browserWindow.viewportRatio);\n    }\n\n    return this;\n  };\n\n  private render(): Engine {\n    for (const item of this.world.getItems()) {\n      item.render(this.browserWindow)\n    };\n\n    return this;\n  }\n}\n","export default class Point2D {\n  public x: number;\n  public y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static center(points: Array<Point2D>): Point2D {\n    if (points.length === 1) {\n      return points[0];\n    } else {\n      return points\n        .reduce((centerPoint, point) => centerPoint.add(point))\n        .divide(points.length);\n    }\n  }\n\n  clone(): Point2D {\n    return new Point2D(this.x, this.y);\n  }\n\n  add(other: Point2D): Point2D {\n    return new Point2D(this.x + other.x, this.y + other.y);\n  }\n\n  substract(other: Point2D): Point2D {\n    return new Point2D(this.x - other.x, this.y - other.y);\n  }\n\n  multiply(scalar: number): Point2D {\n    return new Point2D(this.x * scalar, this.y * scalar);\n  }\n\n  divide(scalar: number): Point2D {\n    return new Point2D(this.x / scalar, this.y / scalar);\n  }\n\n  mirrorHorizontal(): Point2D {\n    return new Point2D(this.x, -this.y);\n  }\n\n  mirrorVertical(): Point2D {\n    return new Point2D(-this.x, this.y);\n  }\n\n  negate(): Point2D {\n    return new Point2D(-this.x, -this.y);\n  }\n\n  rotateDeg(angle: number): Point2D {\n    return this.rotateRad(angle * Math.PI / 180);\n  }\n\n  rotateRad(angle: number): Point2D {\n    const sin: number = Math.sin(angle);\n    const cos: number = Math.cos(angle);\n\n    return new Point2D(\n      cos * this.x - sin * this.y,\n      sin * this.x + cos * this.y,\n    );\n  }\n\n  length(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize(): Point2D {\n    return this.divide(this.length());\n  }\n\n  dot(other: Point2D): number {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  orientationDeg(): number {\n    return (this.y < 0 ? 180 : 0) - this.angleRad() * 180/Math.PI;\n  }\n\n  orientationRad(): number {\n    return (this.y < 0 ? Math.PI : 0) - this.angleRad();\n  }\n\n  quadDistance(other: Point2D): number {\n    return Math.pow(other.x - this.x, 2) + Math.pow(other.y - this.y, 2)\n  }\n\n  distance(other: Point2D): number {\n    return Math.sqrt(this.quadDistance(other));\n  }\n\n  // private --------\n\n  private angleRad(): number {\n    return Math.atan(this.x / this.y);\n  }\n}\n","import Point2D from '../geometry/point2d';\n\nexport default class Peg {\n  public position: Point2D;\n  public heading: Point2D;\n\n  constructor(\n    position: Point2D = new Point2D(0, 0),\n    heading: Point2D = new Point2D(0, 0),\n  ) {\n    this.position = position;\n    this.heading = heading;\n  }\n\n  executeMovement(step: number): Peg {\n    this.position =\n      this.position.add(\n        new Point2D(step * this.heading.x, step * this.heading.y),\n      );\n\n    return this;\n  }\n\n  bounceOfWalls(boardRatio: number): Peg {\n    if ((this.position.x < 0 && this.heading.x < 0) ||\n        (this.position.x > 1 && this.heading.x > 0)) {\n      this.heading = this.heading.mirrorVertical();\n    }\n\n    if ((this.position.y < 0 && this.heading.y < 0) ||\n        (this.position.y > boardRatio && this.heading.y > 0)) {\n      this.heading = this.heading.mirrorHorizontal();\n    }\n\n    return this;\n  }\n}\n","import BrowserWindow from \"../browser-window\";\nimport Point2D from \"../geometry/point2d\";\n\nexport default class Sprite {\n  private htmlElement: HTMLElement;\n  private dimensions: Point2D;\n\n  constructor(\n    parentElement: HTMLElement,\n    cssClass: string,\n    dimensions: Point2D,\n  ) {\n    this.dimensions = dimensions;\n    this.htmlElement = document.createElement('div');\n    this.htmlElement.className = cssClass;\n\n    this.htmlElement.style.position = 'absolute';\n    this.htmlElement.style.top = '0';\n    this.htmlElement.style.left = '0';\n\n    parentElement.appendChild(this.htmlElement);\n  }\n\n  render(\n    browserWindow: BrowserWindow,\n    position: Point2D,\n    heading: Point2D = null,\n  ) {\n    const screenX: number =\n      (position.x - this.dimensions.x / 2) * browserWindow.viewportWidth;\n    const screenY: number =\n      browserWindow.viewportHeight -\n        ((position.y + this.dimensions.y / 2) * browserWindow.viewportWidth);\n    const rotation: number = heading ? -heading.orientationDeg() : 0;\n    const scale: number =\n      (this.dimensions.x * browserWindow.viewportWidth) /\n        this.htmlElement.clientWidth;\n\n    this.htmlElement.style.transform =\n      `translate(${screenX}px, ${screenY}px)\n       rotate(${rotation}deg)\n       scale(${scale}, ${scale})`;\n  }\n}\n","import { Item } from '../engine/interfaces';\n\nimport BrowserWindow from '../engine/browser-window';\nimport Point2D from '../engine/geometry/point2d';\nimport Peg from '../engine/physics/peg';\nimport Sprite from '../engine/view/sprite';\nimport World from '../engine/world';\n\nexport default class Bird implements Item {\n  public world: World;\n\n  public peg: Peg;\n  public sprite: Sprite;\n\n  private turnRate: number;\n\n  constructor(turnRate: number) {\n    this.turnRate = turnRate;\n\n    this.peg = new Peg(new Point2D(0, 0), new Point2D(0.0002, 0.0002));\n    this.sprite =\n      new Sprite(document.documentElement, 'bird', new Point2D(0.05, 0.05));\n  }\n\n  update(step: number, boardRatio: number): void {\n    this.peg.heading = this.peg.heading.rotateDeg(this.turnRate);\n\n    this.peg\n      .executeMovement(step)\n      .bounceOfWalls(boardRatio);\n  }\n\n  render(browserWindow: BrowserWindow): void {\n    this.sprite.render(browserWindow, this.peg.position, this.peg.heading);\n  }\n}\n","import { Item } from '../engine/interfaces';\n\nimport BrowserWindow from '../engine/browser-window';\nimport Point2D from '../engine/geometry/point2d';\nimport Peg from '../engine/physics/peg';\nimport Sprite from '../engine/view/sprite';\nimport World from '../engine/world';\n\nexport default class Hunter implements Item {\n  public world: World;\n\n  public peg: Peg;\n  public sprite: Sprite;\n\n  constructor() {\n    this.peg = new Peg(new Point2D(0, 0.5), new Point2D(0.0001, 0.0002));\n    this.sprite =\n      new Sprite(document.documentElement, 'hunter', new Point2D(0.1, 0.1));\n  }\n\n  update(step: number, boardRatio: number): void {\n    // follow the nearest bird --------\n    const birds: Array<Item> = this.world.getItems('bird');\n\n    let nearestDistance: number = 9999;\n    let nearestBird: Item = null;\n    for (const bird of birds) {\n      const distance: number = this.peg.position.quadDistance(bird.peg.position);\n      if (distance < nearestDistance) {\n        nearestDistance = distance;\n        nearestBird = bird;\n      }\n    }\n\n    const directionToBird: Point2D = nearestBird.peg.position.substract(this.peg.position);\n    const directionOrientation: number = directionToBird.orientationDeg();\n    const hunterOrientation: number = this.peg.heading.orientationDeg();\n    const orientationDiff: number = directionOrientation - hunterOrientation;\n    if (orientationDiff > 15) {\n      this.peg.heading = this.peg.heading.rotateDeg(15);\n    } else if (orientationDiff < -15) {\n      this.peg.heading = this.peg.heading.rotateDeg(-15);\n    } else {\n      this.peg.heading = this.peg.heading.rotateDeg(orientationDiff);\n    }\n    // --------\n\n    this.peg\n      .executeMovement(step)\n      .bounceOfWalls(boardRatio);\n  }\n\n  render(browserWindow: BrowserWindow): void {\n    this.sprite.render(browserWindow, this.peg.position, this.peg.heading);\n  }\n}\n","import Engine from './engine';\nimport Bird from './flock/bird';\nimport Hunter from './flock/hunter';\n\nconst engine = new Engine();\n\nengine\n  .spawn(new Bird(0.75), ['bird'])\n  .spawn(new Bird(-0.5), ['bird'])\n  .spawn(new Bird(0.25), ['bird'])\n  .spawn(new Hunter())\n  .start();\n"]}