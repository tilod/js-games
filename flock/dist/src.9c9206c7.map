{"version":3,"sources":["src/engine/browser-window.ts","src/engine/world.ts","src/engine/index.ts","src/engine/geometry/point2d.ts","src/engine/physics/peg.ts","src/engine/view/sprite.ts","src/engine/ai/flock_ai.ts","src/engine/ai/escape_ai.ts","src/flock/bird.ts","src/engine/ai/turn_to_three_nearest_ai.ts","src/flock/hunter.ts","src/index.ts"],"names":[],"mappings":";AAAA,aAAA,QAAA,YAAA,EAAA,IAAA,EAAA,WAME,SAAA,IACO,KAAA,cAAgB,SAAS,gBACzB,KAAA,SAYT,OATE,OAAA,eAAI,EAAA,UAAA,gBAAa,CAAjB,IAAA,WAAsC,OAAA,KAAK,gBAA1B,YAAA,EAXnB,cAAA,IAYE,OAAA,eAAI,EAAA,UAAA,iBAAc,CAAlB,IAAA,WAAuC,OAAA,KAAK,iBAA1B,YAAA,EAZpB,cAAA,IAaE,OAAA,eAAI,EAAA,UAAA,gBAAa,CAAjB,IAAA,WAAsC,OAAA,KAAK,gBAA1B,YAAA,EAbnB,cAAA,IAeS,EAAA,UAAA,OAAP,WACO,KAAA,eAAiB,KAAK,cAAc,YACpC,KAAA,gBAAkB,KAAK,cAAc,aACrC,KAAA,eAAiB,KAAK,gBAAkB,KAAK,eAEtD,EApBA,GAAA,QAAA,QAAA;;ACEqB,aAAA,QAAA,YAAA,EAArB,IAAA,EAAA,WAKE,SAAA,IACO,KAAA,MAAQ,IAAI,IACZ,KAAA,MAAM,IAAI,EAAM,UAAW,IAmBpC,OAhBE,EAAA,UAAA,QAAA,SAAQ,EAAY,GACb,KAAA,MAAM,IAAI,EAAM,WAAW,KAAK,GAEnB,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAM,CAAb,IAAA,EAAG,EAAA,GACN,EAAuB,KAAK,MAAM,IAAI,GACxC,EACF,EAAQ,KAAK,GAER,KAAA,MAAM,IAAI,EAAK,CAAC,MAK3B,EAAA,UAAA,SAAA,SAAS,GACA,YADA,IAAA,IAAA,EAAc,EAAM,WACpB,KAAK,MAAM,IAAI,IAvBR,EAAA,UAAY,UAyB9B,EA1BA,GAAqB,QAAA,QAAA;;ACGrB,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EALA,IAAA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,YAIA,EAAA,WAIE,SAAA,IACO,KAAA,eAAiB,IAAI,EAAA,QACrB,KAAA,OAAS,IAAI,EAAA,QAwDtB,OApDE,EAAA,UAAA,MAAA,SACE,EACA,GAIO,YAJP,IAAA,IAAA,EAAA,IAEK,KAAA,OAAO,QAAQ,IAAI,EAAgB,KAAK,QAAS,GAE/C,MAGT,EAAA,UAAA,MAAA,WAAA,IAAA,EAAA,KAeM,EAAa,EACjB,OAAO,sBAfM,SAAP,EAAQ,GACZ,EAAK,eAAe,SAEd,IAAA,EAAO,EAAY,EAEzB,EACG,OACA,KAAK,GACL,SAEH,EAAa,EACb,OAAO,sBAAsB,MAQzB,EAAA,UAAA,KAAR,WACqB,IAAA,IAAA,EAAA,EAAA,EAAA,KAAK,OAAO,WAAZ,EAAA,EAAA,OAAA,IAAwB,CAA5B,EAAA,GACR,OAGA,OAAA,MAGD,EAAA,UAAA,KAAR,SAAa,GACQ,IAAA,IAAA,EAAA,EAAA,EAAA,KAAK,OAAO,WAAZ,EAAA,EAAA,OAAA,IAAwB,CAA5B,EAAA,GACR,KAAK,EAAM,KAAK,eAAe,eAG/B,OAAA,MAGD,EAAA,UAAA,OAAR,WACqB,IAAA,IAAA,EAAA,EAAA,EAAA,KAAK,OAAO,WAAZ,EAAA,EAAA,OAAA,IAAwB,CAA5B,EAAA,GACR,OAAO,KAAK,gBAGZ,OAAA,MAEX,EA9DA,GAAA,QAAA,QAAA;;ACLA,aAAA,QAAA,YAAA,EAAA,IAAA,EAAA,WAIE,SAAA,EAAY,EAAW,GAChB,KAAA,EAAI,EACJ,KAAA,EAAI,EAgHb,OA7GS,EAAA,OAAP,SAAc,GACR,OAAkB,IAAlB,EAAO,OACF,EAAO,GAEP,EACJ,OAAO,SAAC,EAAa,GAAU,OAAA,EAAY,IAAI,KAC/C,OAAO,EAAO,SAIrB,EAAA,UAAA,MAAA,WACS,OAAA,IAAI,EAAQ,KAAK,EAAG,KAAK,IAGlC,EAAA,UAAA,IAAA,SAAI,GACK,OAAA,IAAI,EAAQ,KAAK,EAAI,EAAM,EAAG,KAAK,EAAI,EAAM,IAGtD,EAAA,UAAA,UAAA,SAAU,GACD,OAAA,IAAI,EAAQ,KAAK,EAAI,EAAM,EAAG,KAAK,EAAI,EAAM,IAGtD,EAAA,UAAA,SAAA,SAAS,GACA,OAAA,IAAI,EAAQ,KAAK,EAAI,EAAQ,KAAK,EAAI,IAG/C,EAAA,UAAA,OAAA,SAAO,GACE,OAAA,IAAI,EAAQ,KAAK,EAAI,EAAQ,KAAK,EAAI,IAG/C,EAAA,UAAA,iBAAA,WACS,OAAA,IAAI,EAAQ,KAAK,GAAI,KAAK,IAGnC,EAAA,UAAA,eAAA,WACS,OAAA,IAAI,GAAS,KAAK,EAAG,KAAK,IAGnC,EAAA,UAAA,OAAA,WACS,OAAA,IAAI,GAAS,KAAK,GAAI,KAAK,IAGpC,EAAA,UAAA,UAAA,SAAU,GACD,OAAA,KAAK,UAAU,EAAQ,KAAK,GAAK,MAG1C,EAAA,UAAA,aAAA,SAAa,EAAe,GACtB,OAAA,EAAQ,EAAoB,KAAK,UAAU,GAC3C,GAAS,EAAoB,KAAK,WAAW,GAE1C,KAAK,UAAU,IAGxB,EAAA,UAAA,UAAA,SAAU,GACF,IAAA,EAAc,KAAK,IAAI,GACvB,EAAc,KAAK,IAAI,GAEtB,OAAA,IAAI,EACT,EAAM,KAAK,EAAI,EAAM,KAAK,EAC1B,EAAM,KAAK,EAAI,EAAM,KAAK,IAI9B,EAAA,UAAA,aAAA,SAAa,EAAe,GACtB,OAAA,EAAQ,EAAoB,KAAK,UAAU,GAC3C,GAAS,EAAoB,KAAK,WAAW,GAE1C,KAAK,UAAU,IAGxB,EAAA,UAAA,OAAA,WACS,OAAA,KAAK,KAAK,KAAK,EAAI,KAAK,EAAI,KAAK,EAAI,KAAK,IAGnD,EAAA,UAAA,UAAA,SAAU,GACD,YADC,IAAA,IAAA,EAAA,GACD,KAAK,OAAO,KAAK,SAAW,IAGrC,EAAA,UAAA,IAAA,SAAI,GACK,OAAA,KAAK,EAAI,EAAM,EAAI,KAAK,EAAI,EAAM,GAG3C,EAAA,UAAA,SAAA,SAAS,GACA,OAAA,KAAK,KAAK,KAAK,IAAI,IAAU,KAAK,SAAW,EAAM,YAG5D,EAAA,UAAA,SAAA,SAAS,GACA,OAAuB,IAAvB,KAAK,SAAS,GAAa,KAAK,IAGzC,EAAA,UAAA,eAAA,WACS,OAAC,KAAK,EAAI,EAAI,IAAM,GAAkC,IAA7B,KAAK,KAAK,KAAK,EAAI,KAAK,GAAS,KAAK,IAGxE,EAAA,UAAA,eAAA,WACS,OAAC,KAAK,EAAI,EAAI,KAAK,GAAK,GAAK,KAAK,KAAK,KAAK,EAAI,KAAK,IAG9D,EAAA,UAAA,aAAA,SAAa,GACJ,OAAA,KAAK,IAAI,EAAM,EAAI,KAAK,EAAG,GAAK,KAAK,IAAI,EAAM,EAAI,KAAK,EAAG,IAGpE,EAAA,UAAA,SAAA,SAAS,GACA,OAAA,KAAK,KAAK,KAAK,aAAa,KAGrC,EAAA,UAAA,YAAA,SAAY,EAAgB,GACnB,OAAA,KAAK,SAAS,EAAI,GAAS,IAAI,EAAM,SAAS,KAEzD,EAtHA,GAAA,QAAA,QAAA;;ACEA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EAFA,IAAA,EAAA,EAAA,QAAA,wBAEA,EAAA,WAQE,SAAA,EACE,EACA,QADA,IAAA,IAAA,EAAA,IAAwB,EAAA,QAAQ,EAAG,SACnC,IAAA,IAAA,EAAA,IAAuB,EAAA,QAAQ,EAAG,IAE7B,KAAA,SAAW,EACX,KAAA,QAAU,EA+DnB,OA3DE,EAAA,UAAA,WAAA,SAAW,EAAc,GAIhB,OAHF,KAAA,MAAQ,EACR,KAAA,YAAc,EAEZ,MAGT,EAAA,UAAA,KAAA,SAAK,GAGI,OAFF,KAAA,QAAU,EAAU,UAAU,KAAK,iBAEjC,MAGT,EAAA,UAAA,YAAA,SAAY,EAAoB,GACxB,IAAA,EAAgB,KAAK,QAAQ,SAAS,GACtC,EAAuB,KAAK,KAAO,EAAc,IAEnD,OAAA,EAAQ,EACH,KAAK,KACV,KAAK,QAAQ,YACX,EAAU,UAAU,KAAK,iBACzB,EAAe,IAIZ,KAAK,KAAK,IAIrB,EAAA,UAAA,gBAAA,WAMS,OALF,KAAA,SACH,KAAK,SAAS,IACZ,IAAI,EAAA,QAAQ,KAAK,KAAO,KAAK,QAAQ,EAAG,KAAK,KAAO,KAAK,QAAQ,IAG9D,MAGT,EAAA,UAAA,cAAA,WAWS,OAVF,KAAK,SAAS,EAAI,GAAK,KAAK,QAAQ,EAAI,GACxC,KAAK,SAAS,EAAI,GAAK,KAAK,QAAQ,EAAI,KACtC,KAAA,QAAU,KAAK,QAAQ,mBAGzB,KAAK,SAAS,EAAI,GAAK,KAAK,QAAQ,EAAI,GACxC,KAAK,SAAS,EAAI,KAAK,YAAc,KAAK,QAAQ,EAAI,KACpD,KAAA,QAAU,KAAK,QAAQ,oBAGvB,MAIT,OAAA,eAAY,EAAA,UAAA,OAAI,CAAhB,IAAA,WAAoC,OAAA,KAAK,OAAzB,YAAA,EAtElB,cAAA,IAuEE,OAAA,eAAY,EAAA,UAAA,aAAU,CAAtB,IAAA,WAA0C,OAAA,KAAK,aAAzB,YAAA,EAvExB,cAAA,IAyEU,EAAA,UAAA,cAAR,WACS,OAAA,KAAK,iBAAmB,KAAK,eAAiB,KAAK,QAAQ,WAEtE,EA5EA,GAAA,QAAA,QAAA;;ACCA,aAAA,QAAA,YAAA,EAAA,IAAA,EAAA,WAIE,SAAA,EACE,EACA,EACA,GAEK,KAAA,WAAa,EACb,KAAA,YAAc,SAAS,cAAc,OACrC,KAAA,YAAY,UAAY,EAExB,KAAA,YAAY,MAAM,SAAW,WAC7B,KAAA,YAAY,MAAM,IAAM,IACxB,KAAA,YAAY,MAAM,KAAO,IAE9B,EAAc,YAAY,KAAK,aAuBnC,OApBE,EAAA,UAAA,OAAA,SACE,EACA,EACA,QAAA,IAAA,IAAA,EAAA,MAEM,IAAA,GACH,EAAS,EAAI,KAAK,WAAW,EAAI,GAAK,EAAc,cACjD,EACJ,EAAc,gBACV,EAAS,EAAI,KAAK,WAAW,EAAI,GAAK,EAAc,cACpD,EAAmB,GAAW,EAAQ,iBAAmB,EACzD,EACH,KAAK,WAAW,EAAI,EAAc,cACjC,KAAK,YAAY,YAEhB,KAAA,YAAY,MAAM,UACrB,aAAa,EAAO,OAAO,EAAO,sBACxB,EAAQ,sBACT,EAAK,KAAK,EAAK,KAE9B,EAxCA,GAAA,QAAA,QAAA;;ACCA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EAHA,IAAA,EAAA,EAAA,QAAA,wBAGA,EAAA,WAYE,SAAA,EACE,EACA,EACA,EACA,GAAA,IAAA,OAAA,IAAA,EAAA,GAAA,EACE,EAAA,EAAA,iBAAA,OAAA,IAAA,EAAA,GAAA,EACA,EAAA,EAAA,eAAA,OAAA,IAAA,EAAA,EAAA,EACA,EAAA,EAAA,kBAAA,OAAA,IAAA,EAAA,GAAA,EACA,EAAA,EAAA,gBAAA,OAAA,IAAA,EAAA,EAAA,EACA,EAAA,EAAA,mBAAA,OAAA,IAAA,EAAA,IAAA,EACA,EAAA,EAAA,iBAAA,OAAA,IAAA,EAAA,EAAA,EAUG,KAAA,OAAS,EACT,KAAA,MAAQ,EACR,KAAA,KAAO,EAEP,KAAA,sBAAwB,EAAmB,EAC3C,KAAA,gBAAkB,EAClB,KAAA,uBAAyB,EAAoB,EAC7C,KAAA,iBAAmB,EACxB,KAAK,wBAA0B,EAAqB,EAC/C,KAAA,kBAAoB,EA6D7B,OA1DE,EAAA,UAAA,UAAA,WAaqB,IAZb,IAAA,EAAW,KAAK,MAAM,IAAI,SAC1B,EAAU,KAAK,MAAM,IAAI,QAE3B,EAAgC,EAChC,EAA4B,EAE5B,EAAiC,EACjC,EAA4B,EAE5B,EAAkC,EAClC,EAA8B,IAAI,EAAA,QAAQ,EAAG,GAE9B,EAAA,EAAA,EAAA,KAAK,OAAO,SAAS,KAAK,MAA1B,EAAA,EAAA,OAAA,IAAiC,CAAzC,IAAA,EAAI,EAAA,GACT,GAAA,IAAS,KAAK,MAAd,CACE,IAAA,EAAe,EAAS,aAAa,EAAK,IAAI,UAEhD,EAAe,KAAK,0BACtB,EACF,EAAmB,EAAiB,IAAI,EAAK,IAAI,UAE7C,EAAe,KAAK,2BACtB,EACF,EAAmB,EAAiB,IAAI,EAAK,IAAI,SAE7C,EAAe,KAAK,4BACtB,EACF,EACE,EAAmB,IACjB,EAAK,IAAI,SAAS,UAAU,QAI5B,IAAA,EACJ,EAAwB,EACpB,EACG,OAAO,GACP,UAAU,GACV,UAAU,KAAK,iBAClB,EAAQ,UAAU,GAClB,EACJ,EAAyB,EACrB,EACG,OAAO,GACP,UAAU,KAAK,kBAClB,EAAQ,UAAU,GAClB,EACJ,EAA0B,EACtB,EACG,OAAO,GACP,SACA,UAAU,KAAK,mBAClB,EAAQ,UAAU,GAEjB,OAAA,EACJ,IAAI,GACJ,IAAI,IAEX,EAtGA,GAAA,QAAA,QAAA;;ACAA,aAAA,QAAA,YAAA,EAAA,IAAA,EAAA,WAQE,SAAA,EACE,EACA,EACA,EACA,GAAA,IAAA,OAAA,IAAA,EAAA,GAAA,EACE,EAAA,EAAA,eAAA,OAAA,IAAA,EAAA,GAAA,EACA,EAAA,EAAA,aAAA,OAAA,IAAA,EAAA,GAAA,EAMG,KAAA,OAAS,EACT,KAAA,MAAQ,EACR,KAAA,KAAO,EACP,KAAA,oBAAsB,EAAiB,EACvC,KAAA,cAAgB,EAkCzB,OA/BE,EAAA,UAAA,UAAA,WAUuB,IATf,IAAA,EAAoB,KAAK,MAAM,IAAI,SAGrC,EAA0B,EAC1B,EAAsB,KAEtB,EAA2B,KAC3B,GAAsB,EAEL,EAAA,EAAA,EARQ,KAAK,OAAO,SAAS,KAAK,MAQlC,EAAA,EAAA,OAAA,IAAS,CAAnB,IAAA,EAAM,EAAA,GACT,EAAmB,EAAS,aAAa,EAAO,IAAI,UACtD,EAAW,IACb,EAAkB,EAClB,EAAgB,GAeb,OAXH,EAAkB,KAAK,qBACzB,GAAa,EACb,EACE,EAAc,IAAI,SACf,UAAU,GACV,SACA,UAAU,KAAK,gBAEpB,EAAkB,KAAK,MAAM,IAAI,QAG5B,CAAC,EAAiB,IAE7B,EA1DA,GAAA,QAAA,QAAA;;ACMA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EAPA,IAAA,EAAA,EAAA,QAAA,+BACA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,0BAEA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,2BAEA,EAAA,WAUE,SAAA,EAAY,GACL,KAAA,OAAS,EACT,KAAA,SAAW,IAAI,EAAA,QAAQ,EAAO,KAAM,QACpC,KAAA,UAAY,IAAI,EAAA,QAAgB,EAAO,KAAM,UAE7C,KAAA,IACH,IAAI,EAAA,QACF,IAAI,EAAA,QAAQ,KAAK,SAAU,KAAK,UAChC,IAAI,EAAA,QAAQ,KAAK,SAAW,GAAK,KAAK,SAAW,IAAK,UAAU,OAG/D,KAAA,OACH,IAAI,EAAA,QAAO,SAAS,gBAAiB,OAAQ,IAAI,EAAA,QAAQ,KAAO,OAwBtE,OArBE,EAAA,UAAA,KAAA,WACQ,IAAA,EAAA,KAAA,UAAA,YAAC,EAAA,EAAA,GAAiB,EAAA,EAAA,GAGnB,KAAA,QAAU,KAAK,SAAS,YAAY,IAAI,GACxC,KAAA,YAAc,GAGrB,EAAA,UAAA,KAAA,SAAK,EAAc,GACX,IAAA,EAAsB,KAAK,YAAc,KAAO,IAEjD,KAAA,IACF,WAAW,EAAM,GACjB,YAAY,KAAK,QAAS,GAC1B,kBACA,iBAGL,EAAA,UAAA,OAAA,SAAO,GACA,KAAA,OAAO,OAAO,EAAe,KAAK,IAAI,SAAU,KAAK,IAAI,UAElE,EA9CA,GAAA,QAAA,QAAA;;ACNA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EAHA,IAAA,EAAA,EAAA,QAAA,wBAGA,EAAA,WAKE,SAAA,EAAY,EAAc,EAAY,GAC/B,KAAA,OAAS,EACT,KAAA,MAAQ,EACR,KAAA,KAAO,EAgDhB,OA7CE,EAAA,UAAA,UAAA,WAaqB,IAZb,IAAA,EAAoB,KAAK,MAAM,IAAI,SAGrC,EAA0B,EAC1B,EAAoB,KAEpB,EAAgC,IAChC,EAA0B,KAE1B,EAA+B,IAC/B,EAAyB,KAEV,EAAA,EAAA,EAXQ,KAAK,OAAO,SAAS,KAAK,MAWlC,EAAA,EAAA,OAAA,IAAO,CAAf,IAAA,EAAI,EAAA,GACP,EAAmB,EAAS,aAAa,EAAK,IAAI,UACpD,EAAW,IACT,EAAW,EACT,EAAW,GACb,EAAuB,EACvB,EAAmB,EACnB,EAAwB,EACxB,EAAkB,EAClB,EAAoB,EACpB,EAAc,IAEd,EAAuB,EACvB,EAAmB,EACnB,EAAwB,EACxB,EAAoB,IAGtB,EAAuB,EACvB,EAAmB,IAKlB,OAAA,EAAA,QACJ,OAAO,CACN,EAAY,IAAI,SAChB,EAAkB,IAAI,SACtB,EAAiB,IAAI,WAEtB,UAAU,IAEjB,EAxDA,GAAA,QAAA,QAAA;;ACKA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EANA,IAAA,EAAA,EAAA,QAAA,+BACA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,0BAEA,EAAA,EAAA,QAAA,0CAEA,EAAA,WAQE,SAAA,EAAY,GACL,KAAA,OAAS,EACT,KAAA,UAAY,IAAI,EAAA,QAAqB,EAAO,KAAM,QAElD,KAAA,IACH,IAAI,EAAA,QACF,IAAI,EAAA,QAAQ,KAAK,SAAU,KAAK,UAChC,IAAI,EAAA,QAAQ,KAAK,SAAW,GAAK,KAAK,SAAW,IAAK,UAAU,OAG/D,KAAA,OACH,IAAI,EAAA,QAAO,SAAS,gBAAiB,SAAU,IAAI,EAAA,QAAQ,IAAM,MAkBvE,OAfE,EAAA,UAAA,KAAA,WACO,KAAA,QAAU,KAAK,UAAU,aAGhC,EAAA,UAAA,KAAA,SAAK,EAAc,GACZ,KAAA,IACF,WAAW,EAAM,GACjB,YAAY,KAAK,QAAS,KAC1B,kBACA,iBAGL,EAAA,UAAA,OAAA,SAAO,GACA,KAAA,OAAO,OAAO,EAAe,KAAK,IAAI,SAAU,KAAK,IAAI,UAElE,EArCA,GAAA,QAAA,QAAA;;ACAA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EAHA,IANA,IAAA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,mBAEM,EAAiB,IAAI,EAAA,QAElB,EAAI,EAAG,EAAI,MAAO,EAAG,EAAO,MAAM,EAAA,QAAM,CAAC,SAClD,EAAO,MAAM,EAAA,QAAQ,CAAC,WACtB,EAAO,MAAM,EAAA,QAAQ,CAAC,WACtB,EAAO","file":"src.9c9206c7.map","sourceRoot":"..","sourcesContent":["export default class BrowserWindow {\n  private _htmlDocument : HTMLElement;\n  private _viewportWidth : number;\n  private _viewportHeight : number;\n  private _viewportRatio : number;\n\n  constructor() {\n    this._htmlDocument = document.documentElement;\n    this.update();\n  }\n\n  get viewportWidth() : number { return this._viewportWidth };\n  get viewportHeight() : number { return this._viewportHeight };\n  get viewportRatio() : number { return this._viewportRatio };\n\n  public update() : void {\n    this._viewportWidth = this._htmlDocument.clientWidth;\n    this._viewportHeight = this._htmlDocument.clientHeight;\n    this._viewportRatio = this._viewportHeight / this.viewportWidth;\n  }\n}\n","import { Item } from './interfaces';\n\nexport default class World {\n  static readonly ALL_ITEMS = '__all__';\n\n  private items: Map<String, Array<Item>>;\n\n  constructor() {\n    this.items = new Map();\n    this.items.set(World.ALL_ITEMS, []);\n  }\n\n  addItem(item: Item, tags: Array<String>): void {\n    this.items.get(World.ALL_ITEMS).push(item);\n\n    for (const tag of tags) {\n      const tagList: Array<Item> = this.items.get(tag);\n      if (tagList) {\n        tagList.push(item)\n      } else {\n        this.items.set(tag, [item]);\n      }\n    }\n  }\n\n  getItems(tag: String = World.ALL_ITEMS): Array<Item> {\n    return this.items.get(tag);\n  }\n}\n","import BrowserWindow from './browser-window';\nimport World from './world';\n\nimport { Item } from './interfaces';\n\nexport default class Engine {\n  private _browserWindow: BrowserWindow;\n  private _world: World;\n\n  constructor() {\n    this._browserWindow = new BrowserWindow();\n    this._world = new World();\n  }\n\n\n  spawn(\n    itemConstructor: { new(world: World): Item },\n    tags: Array<String> = []\n  ): Engine {\n    this._world.addItem(new itemConstructor(this._world), tags);\n\n    return this;\n  }\n\n  start(): void {\n    const loop = (timestamp: number): void => {\n      this._browserWindow.update();\n\n      const step = timestamp - lastRender;\n\n      this\n        .plan()\n        .move(step)\n        .render();\n\n      lastRender = timestamp;\n      window.requestAnimationFrame(loop);\n    };\n\n    let lastRender = 0;\n    window.requestAnimationFrame(loop);\n  }\n\n\n  private plan(): Engine {\n    for (const item of this._world.getItems()) {\n      item.plan();\n    }\n\n    return this;\n  };\n\n  private move(step: number): Engine {\n    for (const item of this._world.getItems()) {\n      item.move(step, this._browserWindow.viewportRatio);\n    }\n\n    return this;\n  };\n\n  private render(): Engine {\n    for (const item of this._world.getItems()) {\n      item.render(this._browserWindow)\n    };\n\n    return this;\n  }\n}\n","export default class Point2D {\n  public x: number;\n  public y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static center(points: Array<Point2D>): Point2D {\n    if (points.length === 1) {\n      return points[0];\n    } else {\n      return points\n        .reduce((centerPoint, point) => centerPoint.add(point))\n        .divide(points.length);\n    }\n  }\n\n  clone(): Point2D {\n    return new Point2D(this.x, this.y);\n  }\n\n  add(other: Point2D): Point2D {\n    return new Point2D(this.x + other.x, this.y + other.y);\n  }\n\n  substract(other: Point2D): Point2D {\n    return new Point2D(this.x - other.x, this.y - other.y);\n  }\n\n  multiply(scalar: number): Point2D {\n    return new Point2D(this.x * scalar, this.y * scalar);\n  }\n\n  divide(scalar: number): Point2D {\n    return new Point2D(this.x / scalar, this.y / scalar);\n  }\n\n  mirrorHorizontal(): Point2D {\n    return new Point2D(this.x, -this.y);\n  }\n\n  mirrorVertical(): Point2D {\n    return new Point2D(-this.x, this.y);\n  }\n\n  negate(): Point2D {\n    return new Point2D(-this.x, -this.y);\n  }\n\n  rotateDeg(angle: number): Point2D {\n    return this.rotateRad(angle * Math.PI / 180);\n  }\n\n  rotateDegMax(angle: number, maxTurnRate: number): Point2D {\n    if (angle > maxTurnRate) return this.rotateDeg(maxTurnRate);\n    if (angle < -maxTurnRate) return this.rotateDeg(-maxTurnRate);\n\n    return this.rotateDeg(angle);\n  }\n\n  rotateRad(angle: number): Point2D {\n    const sin: number = Math.sin(angle);\n    const cos: number = Math.cos(angle);\n\n    return new Point2D(\n      cos * this.x - sin * this.y,\n      sin * this.x + cos * this.y,\n    );\n  }\n\n  rotateRadMax(angle: number, maxTurnRate: number): Point2D {\n    if (angle > maxTurnRate) return this.rotateRad(maxTurnRate);\n    if (angle < -maxTurnRate) return this.rotateRad(-maxTurnRate);\n\n    return this.rotateRad(angle);\n  }\n\n  length(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize(length: number = 1): Point2D {\n    return this.divide(this.length() / length);\n  }\n\n  dot(other: Point2D): number {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  angleRad(other: Point2D): number {\n    return Math.acos(this.dot(other) / (this.length() * other.length()));\n  }\n\n  angleDeg(other: Point2D): number {\n    return this.angleRad(other) * 180/Math.PI;\n  }\n\n  orientationDeg(): number {\n    return (this.y < 0 ? 180 : 0) - Math.atan(this.x / this.y) * 180/Math.PI;\n  }\n\n  orientationRad(): number {\n    return (this.y < 0 ? Math.PI : 0) - Math.atan(this.x / this.y);\n  }\n\n  quadDistance(other: Point2D): number {\n    return Math.pow(other.x - this.x, 2) + Math.pow(other.y - this.y, 2)\n  }\n\n  distance(other: Point2D): number {\n    return Math.sqrt(this.quadDistance(other));\n  }\n\n  interpolate(other: Point2D, loading: number) {\n    return this.multiply(1 - loading).add(other.multiply(loading));\n  }\n}\n","import Point2D from '../geometry/point2d';\n\nexport default class Peg {\n  public position: Point2D;\n  public heading: Point2D;\n\n  private _step: number;\n  private _boardRatio: number;\n  private _headingLength: number;\n\n  constructor(\n    position: Point2D = new Point2D(0, 0),\n    heading: Point2D = new Point2D(0, 0),\n  ) {\n    this.position = position;\n    this.heading = heading;\n  }\n\n\n  setupFrame(step: number, boardRatio: number): Peg {\n    this._step = step;\n    this._boardRatio = boardRatio;\n\n    return this;\n  }\n\n  turn(direction: Point2D): Peg {\n    this.heading = direction.normalize(this.headingLength());\n\n    return this;\n  }\n\n  turnWithMax(direction: Point2D, maxTurnRate: number): Peg {\n    const angle: number = this.heading.angleDeg(direction);\n    const maxTurnAngle: number = this.step * maxTurnRate / 1000;\n\n    if (angle > maxTurnAngle) {\n      return this.turn(\n        this.heading.interpolate(\n          direction.normalize(this.headingLength()),\n          maxTurnAngle / angle,\n        )\n      );\n    } else {\n      return this.turn(direction);\n    }\n  }\n\n  executeMovement(): Peg {\n    this.position =\n      this.position.add(\n        new Point2D(this.step * this.heading.x, this.step * this.heading.y),\n      );\n\n    return this;\n  }\n\n  bounceOfWalls(): Peg {\n    if ((this.position.x < 0 && this.heading.x < 0) ||\n        (this.position.x > 1 && this.heading.x > 0)) {\n      this.heading = this.heading.mirrorVertical();\n    }\n\n    if ((this.position.y < 0 && this.heading.y < 0) ||\n        (this.position.y > this.boardRatio && this.heading.y > 0)) {\n      this.heading = this.heading.mirrorHorizontal();\n    }\n\n    return this;\n  }\n\n\n  private get step(): number { return this._step; }\n  private get boardRatio(): number { return this._boardRatio; }\n\n  private headingLength(): number {\n    return this._headingLength || (this._headingLength = this.heading.length());\n  }\n}\n","import BrowserWindow from \"../browser-window\";\nimport Point2D from \"../geometry/point2d\";\n\nexport default class Sprite {\n  private htmlElement: HTMLElement;\n  private dimensions: Point2D;\n\n  constructor(\n    parentElement: HTMLElement,\n    cssClass: string,\n    dimensions: Point2D,\n  ) {\n    this.dimensions = dimensions;\n    this.htmlElement = document.createElement('div');\n    this.htmlElement.className = cssClass;\n\n    this.htmlElement.style.position = 'absolute';\n    this.htmlElement.style.top = '0';\n    this.htmlElement.style.left = '0';\n\n    parentElement.appendChild(this.htmlElement);\n  }\n\n  render(\n    browserWindow: BrowserWindow,\n    position: Point2D,\n    heading: Point2D = null,\n  ) {\n    const screenX: number =\n      (position.x - this.dimensions.x / 2) * browserWindow.viewportWidth;\n    const screenY: number =\n      browserWindow.viewportHeight -\n        ((position.y + this.dimensions.y / 2) * browserWindow.viewportWidth);\n    const rotation: number = heading ? -heading.orientationDeg() : 0;\n    const scale: number =\n      (this.dimensions.x * browserWindow.viewportWidth) /\n        this.htmlElement.clientWidth;\n\n    this.htmlElement.style.transform =\n      `translate(${screenX}px, ${screenY}px)\n       rotate(${rotation}deg)\n       scale(${scale}, ${scale})`;\n  }\n}\n","import World from \"../world\";\nimport Point2D from \"../geometry/point2d\";\nimport { Item } from \"../interfaces\";\n\nexport default class FlockAI {\n  private _world: World;\n  private _item: Item;\n  private _tag: String;\n\n  private _quadCohesionDistance: number;\n  private _cohesionWeight: number;\n  private _quadAlignmentDistance: number;\n  private _alignmentWeight: number;\n  private _quadSeparationDistance: number;\n  private _separationWeight: number;\n\n  constructor(\n    world: World,\n    item: Item,\n    tag: String,\n    {\n      cohesionDistance = 0.2,\n      cohesionWeight = 1,\n      alignmentDistance = 0.1,\n      alignmentWeight = 2,\n      separationDistance = 0.01,\n      separationWeight = 4,\n    }: {\n      cohesionDistance?: number,\n      cohesionWeight?: number,\n      alignmentDistance?: number,\n      alignmentWeight?: number,\n      separationDistance?: number,\n      separationWeight?: number,\n    } = {},\n  ) {\n    this._world = world;\n    this._item = item;\n    this._tag = tag;\n\n    this._quadCohesionDistance = cohesionDistance * cohesionDistance;\n    this._cohesionWeight = cohesionWeight;\n    this._quadAlignmentDistance = alignmentDistance * alignmentDistance;\n    this._alignmentWeight = alignmentWeight,\n    this._quadSeparationDistance = separationDistance * separationDistance;\n    this._separationWeight = separationWeight;\n  }\n\n  direction(): Point2D {\n    const position = this._item.peg.position;\n    const heading = this._item.peg.heading;\n\n    let cohesionNeighborCount: number = 1;\n    let cohesionPosition: Point2D = position;\n\n    let alignmentNeighborCount: number = 1;\n    let alignmentHeading: Point2D = heading;\n\n    let separationNeighborCount: number = 0;\n    let separationPosition: Point2D = new Point2D(0, 0);\n\n    for (const item of this._world.getItems(this._tag)) {\n      if (item === this._item) continue;\n      const quadDistance = position.quadDistance(item.peg.position)\n\n      if (quadDistance > this._quadCohesionDistance) continue;\n      ++cohesionNeighborCount;\n      cohesionPosition = cohesionPosition.add(item.peg.position);\n\n      if (quadDistance > this._quadAlignmentDistance) continue;\n      ++alignmentNeighborCount;\n      alignmentHeading = alignmentHeading.add(item.peg.heading);\n\n      if (quadDistance > this._quadSeparationDistance) continue;\n      ++separationNeighborCount;\n      separationPosition =\n        separationPosition.add(\n          item.peg.position.substract(position)\n        );\n    }\n\n    const cohesionDirection: Point2D =\n      cohesionNeighborCount > 1\n        ? cohesionPosition\n            .divide(cohesionNeighborCount)\n            .substract(position)\n            .normalize(this._cohesionWeight)\n        : heading.normalize(1);\n    const alignmentDirection: Point2D =\n      alignmentNeighborCount > 2\n        ? alignmentHeading\n            .divide(alignmentNeighborCount)\n            .normalize(this._alignmentWeight)\n        : heading.normalize(1);\n    const separationDirection: Point2D =\n      separationNeighborCount > 0\n        ? separationPosition\n            .divide(separationNeighborCount)\n            .negate()\n            .normalize(this._separationWeight)\n        : heading.normalize(1);\n\n    return cohesionDirection\n      .add(alignmentDirection)\n      .add(separationDirection);\n  }\n}\n","import World from \"../world\";\nimport { Item } from \"../interfaces\";\nimport Point2D from \"../geometry/point2d\";\n\nexport default class EscapeNearestAI {\n  private _world: World;\n  private _item: Item;\n  private _tag: String;\n\n  private _quadEscapeDistance: number;\n  private _escapeWeight: number;\n\n  constructor(\n    world: World,\n    item: Item,\n    tag: String,\n    {\n      escapeDistance = 0.1,\n      escapeWeight = 16,\n    }: {\n      escapeDistance?: number,\n      escapeWeight?: number,\n    } = {},\n  ) {\n    this._world = world;\n    this._item = item;\n    this._tag = tag;\n    this._quadEscapeDistance = escapeDistance * escapeDistance;\n    this._escapeWeight = escapeWeight;\n  }\n\n  direction(): [Point2D, boolean] {\n    const position: Point2D = this._item.peg.position;\n    const hunters: Array<Item> = this._world.getItems(this._tag);\n\n    let nearestDistance: number = 1;\n    let nearestHunter: Item = null;\n\n    let escapeDirection: Point2D = null;\n    let escapeMode: boolean = false;\n\n    for (const hunter of hunters) {\n      const distance: number = position.quadDistance(hunter.peg.position);\n      if (distance < nearestDistance) {\n        nearestDistance = distance;\n        nearestHunter = hunter;\n      }\n    }\n\n    if (nearestDistance < this._quadEscapeDistance) {\n      escapeMode = true;\n      escapeDirection =\n        nearestHunter.peg.position\n          .substract(position)\n          .negate()\n          .normalize(this._escapeWeight);\n    } else {\n      escapeDirection = this._item.peg.heading;\n    }\n\n    return [escapeDirection, escapeMode];\n  }\n}\n","import { Item } from '../engine/interfaces';\n\nimport BrowserWindow from '../engine/browser-window';\nimport Point2D from '../engine/geometry/point2d';\nimport Peg from '../engine/physics/peg';\nimport Sprite from '../engine/view/sprite';\nimport World from '../engine/world';\nimport FlockAI from '../engine/ai/flock_ai';\nimport EscapeNearestAI from '../engine/ai/escape_ai';\n\nexport default class Bird implements Item {\n  public peg: Peg;\n  public sprite: Sprite;\n\n  private _world: World;\n  private _flockAI: FlockAI;\n  private _escapeAI: EscapeNearestAI;\n  private _turnTo: Point2D;\n  private _escapeMode: boolean;\n\n  constructor(world: World) {\n    this._world = world;\n    this._flockAI = new FlockAI(world, this, 'bird');\n    this._escapeAI = new EscapeNearestAI(world, this, 'hunter');\n\n    this.peg =\n      new Peg(\n        new Point2D(Math.random(), Math.random()),\n        new Point2D(Math.random() - 0.5, Math.random() - 0.5).normalize(0.0002),\n      );\n\n    this.sprite =\n      new Sprite(document.documentElement, 'bird', new Point2D(0.005, 0.005));\n  }\n\n  plan(): void {\n    const [escapeDirection, escapeMode]: [Point2D, boolean] =\n      this._escapeAI.direction();\n\n    this._turnTo = this._flockAI.direction().add(escapeDirection);\n    this._escapeMode = escapeMode;\n  }\n\n  move(step: number, boardRatio: number): void {\n    const maxTurnRate: number = this._escapeMode ? 1020 : 360;\n\n    this.peg\n      .setupFrame(step, boardRatio)\n      .turnWithMax(this._turnTo, maxTurnRate)\n      .executeMovement()\n      .bounceOfWalls();\n  }\n\n  render(browserWindow: BrowserWindow): void {\n    this.sprite.render(browserWindow, this.peg.position, this.peg.heading);\n  }\n}\n","import World from \"../world\";\nimport Point2D from \"../geometry/point2d\";\nimport { Item } from \"../interfaces\";\n\nexport default class TurnToThreeNearestAI {\n  private _world: World;\n  private _item: Item;\n  private _tag: String;\n\n  constructor(world: World, item: Item, tag: String) {\n    this._world = world;\n    this._item = item;\n    this._tag = tag;\n  }\n\n  direction(): Point2D {\n    const position: Point2D = this._item.peg.position;\n    const items: Array<Item> = this._world.getItems(this._tag);\n\n    let nearestDistance: number = 1;\n    let nearestItem: Item = null;\n\n    let secondNearestDistance: number = 1.1;\n    let secondNearestItem: Item = null;\n\n    let thirdNearestDistance: number = 1.2;\n    let thirdNearestItem: Item = null;\n\n    for (const item of items) {\n      const distance: number = position.quadDistance(item.peg.position);\n      if (distance < thirdNearestDistance) {\n        if (distance < secondNearestDistance) {\n          if (distance < nearestDistance) {\n            thirdNearestDistance = secondNearestDistance;\n            thirdNearestItem = secondNearestItem;\n            secondNearestDistance = nearestDistance;\n            nearestDistance = distance;\n            secondNearestItem = nearestItem;\n            nearestItem = item;\n          } else {\n            thirdNearestDistance = secondNearestDistance;\n            thirdNearestItem = secondNearestItem;\n            secondNearestDistance = distance;\n            secondNearestItem = item;\n          }\n        } else {\n          thirdNearestDistance = distance;\n          thirdNearestItem = item;\n        }\n      }\n    }\n\n    return Point2D\n      .center([\n        nearestItem.peg.position,\n        secondNearestItem.peg.position,\n        thirdNearestItem.peg.position,\n      ])\n      .substract(position);\n  }\n}\n","import { Item } from '../engine/interfaces';\n\nimport BrowserWindow from '../engine/browser-window';\nimport Point2D from '../engine/geometry/point2d';\nimport Peg from '../engine/physics/peg';\nimport Sprite from '../engine/view/sprite';\nimport World from '../engine/world';\nimport TurnToThreeNearestAI from '../engine/ai/turn_to_three_nearest_ai';\n\nexport default class Hunter implements Item {\n  public peg: Peg;\n  public sprite: Sprite;\n\n  private _world: World;\n  private _followAI: TurnToThreeNearestAI;\n  private _turnTo: Point2D;\n\n  constructor(world: World) {\n    this._world = world;\n    this._followAI = new TurnToThreeNearestAI(world, this, 'bird');\n\n    this.peg =\n      new Peg(\n        new Point2D(Math.random(), Math.random()),\n        new Point2D(Math.random() - 0.5, Math.random() - 0.5).normalize(0.0003),\n      );\n\n    this.sprite =\n      new Sprite(document.documentElement, 'hunter', new Point2D(0.02, 0.02));\n  }\n\n  plan(): void {\n    this._turnTo = this._followAI.direction();\n  }\n\n  move(step: number, boardRatio: number): void {\n    this.peg\n      .setupFrame(step, boardRatio)\n      .turnWithMax(this._turnTo, 360)\n      .executeMovement()\n      .bounceOfWalls();\n  }\n\n  render(browserWindow: BrowserWindow): void {\n    this.sprite.render(browserWindow, this.peg.position, this.peg.heading);\n  }\n}\n","import Engine from './engine';\nimport Bird from './flock/bird';\nimport Hunter from './flock/hunter';\n\nconst engine: Engine = new Engine();\n\nfor (let i = 0; i < 100; ++i) engine.spawn(Bird, ['bird']);\nengine.spawn(Hunter, ['hunter']);\nengine.spawn(Hunter, ['hunter']);\nengine.start();\n"]}