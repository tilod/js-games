{"version":3,"sources":["src/engine/browser-window.ts","src/engine/world.ts","src/engine/index.ts","src/engine/geometry/point2d.ts","src/engine/physics/peg.ts","src/engine/view/sprite.ts","src/flock/bird.ts","src/engine/physics/distance_map.ts","src/flock/hunter.ts","src/index.ts"],"names":[],"mappings":"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SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAK,UAAW,CAAC,SAC3B,MAAM,IAAI,EAAA,QAAO,WACjB","file":"src.5698d7b2.map","sourceRoot":"..","sourcesContent":["export default class BrowserWindow {\n  private _htmlDocument : HTMLElement;\n  private _viewportWidth : number;\n  private _viewportHeight : number;\n  private _viewportRatio : number;\n\n  constructor() {\n    this._htmlDocument = document.documentElement;\n    this.update();\n  }\n\n  get viewportWidth() : number { return this._viewportWidth };\n  get viewportHeight() : number { return this._viewportHeight };\n  get viewportRatio() : number { return this._viewportRatio };\n\n  public update() : void {\n    this._viewportWidth = this._htmlDocument.clientWidth;\n    this._viewportHeight = this._htmlDocument.clientHeight;\n    this._viewportRatio = this._viewportHeight / this.viewportWidth;\n  }\n}\n","import { Item } from './interfaces';\n\nexport default class World {\n  static readonly ALL_ITEMS = '__all__';\n\n  private items: Map<String, Array<Item>>;\n\n  constructor() {\n    this.items = new Map();\n    this.items.set(World.ALL_ITEMS, []);\n  }\n\n  addItem(item: Item, tags: Array<String>): void {\n    this.items.get(World.ALL_ITEMS).push(item);\n\n    for (const tag of tags) {\n      const tagList: Array<Item> = this.items.get(tag);\n      if (tagList) {\n        tagList.push(item)\n      } else {\n        this.items.set(tag, [item]);\n      }\n    }\n  }\n\n  getItems(tag: String = World.ALL_ITEMS): Array<Item> {\n    return this.items.get(tag);\n  }\n}\n","import BrowserWindow from './browser-window';\nimport World from './world';\n\nimport { Item } from './interfaces';\n\nexport default class Engine {\n  private browserWindow: BrowserWindow;\n  private world: World;\n\n  constructor() {\n    this.browserWindow = new BrowserWindow();\n    this.world = new World();\n  }\n\n\n  spawn(item: Item, tags: Array<String> = []): Engine {\n    item.world = this.world;\n    this.world.addItem(item, tags);\n\n    return this;\n  }\n\n  start(): void {\n    const loop = (timestamp: number): void => {\n      this.browserWindow.update();\n\n      const step = timestamp - lastRender;\n\n      this\n        .plan(step)\n        .move(step)\n        .render();\n\n      lastRender = timestamp;\n      window.requestAnimationFrame(loop);\n    };\n\n    let lastRender = 0;\n    window.requestAnimationFrame(loop);\n  }\n\n\n  private plan(step: number): Engine {\n    for (const item of this.world.getItems()) {\n      item.plan(step);\n    }\n\n    return this;\n  };\n\n  private move(step: number): Engine {\n    for (const item of this.world.getItems()) {\n      item.move(step, this.browserWindow.viewportRatio);\n    }\n\n    return this;\n  };\n\n  private render(): Engine {\n    for (const item of this.world.getItems()) {\n      item.render(this.browserWindow)\n    };\n\n    return this;\n  }\n}\n","export default class Point2D {\n  public x: number;\n  public y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static center(points: Array<Point2D>): Point2D {\n    if (points.length === 1) {\n      return points[0];\n    } else {\n      return points\n        .reduce((centerPoint, point) => centerPoint.add(point))\n        .divide(points.length);\n    }\n  }\n\n  clone(): Point2D {\n    return new Point2D(this.x, this.y);\n  }\n\n  add(other: Point2D): Point2D {\n    return new Point2D(this.x + other.x, this.y + other.y);\n  }\n\n  substract(other: Point2D): Point2D {\n    return new Point2D(this.x - other.x, this.y - other.y);\n  }\n\n  multiply(scalar: number): Point2D {\n    return new Point2D(this.x * scalar, this.y * scalar);\n  }\n\n  divide(scalar: number): Point2D {\n    return new Point2D(this.x / scalar, this.y / scalar);\n  }\n\n  mirrorHorizontal(): Point2D {\n    return new Point2D(this.x, -this.y);\n  }\n\n  mirrorVertical(): Point2D {\n    return new Point2D(-this.x, this.y);\n  }\n\n  negate(): Point2D {\n    return new Point2D(-this.x, -this.y);\n  }\n\n  rotateDeg(angle: number): Point2D {\n    return this.rotateRad(angle * Math.PI / 180);\n  }\n\n  rotateDegMax(angle: number, maxTurnRate: number): Point2D {\n    if (angle > maxTurnRate) return this.rotateDeg(maxTurnRate);\n    if (angle < -maxTurnRate) return this.rotateDeg(-maxTurnRate);\n\n    return this.rotateDeg(angle);\n  }\n\n  rotateRad(angle: number): Point2D {\n    const sin: number = Math.sin(angle);\n    const cos: number = Math.cos(angle);\n\n    return new Point2D(\n      cos * this.x - sin * this.y,\n      sin * this.x + cos * this.y,\n    );\n  }\n\n  rotateRadMax(angle: number, maxTurnRate: number): Point2D {\n    if (angle > maxTurnRate) return this.rotateRad(maxTurnRate);\n    if (angle < -maxTurnRate) return this.rotateRad(-maxTurnRate);\n\n    return this.rotateRad(angle);\n  }\n\n  rotateTowards(other: Point2D, maxTurnRate: number): Point2D {\n    return this.rotateDegMax(\n      other.orientationDeg() - this.orientationDeg(),\n      maxTurnRate,\n    );\n  }\n\n  length(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize(length: number = 1): Point2D {\n    return this.divide(this.length() / length);\n  }\n\n  dot(other: Point2D): number {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  orientationDeg(): number {\n    return (this.y < 0 ? 180 : 0) - this.angleRad() * 180/Math.PI;\n  }\n\n  orientationRad(): number {\n    return (this.y < 0 ? Math.PI : 0) - this.angleRad();\n  }\n\n  quadDistance(other: Point2D): number {\n    return Math.pow(other.x - this.x, 2) + Math.pow(other.y - this.y, 2)\n  }\n\n  distance(other: Point2D): number {\n    return Math.sqrt(this.quadDistance(other));\n  }\n\n  // private --------\n\n  private angleRad(): number {\n    return Math.atan(this.x / this.y);\n  }\n}\n","import Point2D from '../geometry/point2d';\n\nexport default class Peg {\n  public readonly id: String;\n  public position: Point2D;\n  public heading: Point2D;\n\n  constructor(\n    id: String,\n    position: Point2D = new Point2D(0, 0),\n    heading: Point2D = new Point2D(0, 0),\n  ) {\n    this.id = id;\n    this.position = position;\n    this.heading = heading;\n  }\n\n  executeMovement(step: number): Peg {\n    this.position =\n      this.position.add(\n        new Point2D(step * this.heading.x, step * this.heading.y),\n      );\n\n    return this;\n  }\n\n  bounceOfWalls(boardRatio: number): Peg {\n    if ((this.position.x < 0 && this.heading.x < 0) ||\n        (this.position.x > 1 && this.heading.x > 0)) {\n      this.heading = this.heading.mirrorVertical();\n    }\n\n    if ((this.position.y < 0 && this.heading.y < 0) ||\n        (this.position.y > boardRatio && this.heading.y > 0)) {\n      this.heading = this.heading.mirrorHorizontal();\n    }\n\n    return this;\n  }\n}\n","import BrowserWindow from \"../browser-window\";\nimport Point2D from \"../geometry/point2d\";\n\nexport default class Sprite {\n  private htmlElement: HTMLElement;\n  private dimensions: Point2D;\n\n  constructor(\n    parentElement: HTMLElement,\n    cssClass: string,\n    dimensions: Point2D,\n  ) {\n    this.dimensions = dimensions;\n    this.htmlElement = document.createElement('div');\n    this.htmlElement.className = cssClass;\n\n    this.htmlElement.style.position = 'absolute';\n    this.htmlElement.style.top = '0';\n    this.htmlElement.style.left = '0';\n\n    parentElement.appendChild(this.htmlElement);\n  }\n\n  render(\n    browserWindow: BrowserWindow,\n    position: Point2D,\n    heading: Point2D = null,\n  ) {\n    const screenX: number =\n      (position.x - this.dimensions.x / 2) * browserWindow.viewportWidth;\n    const screenY: number =\n      browserWindow.viewportHeight -\n        ((position.y + this.dimensions.y / 2) * browserWindow.viewportWidth);\n    const rotation: number = heading ? -heading.orientationDeg() : 0;\n    const scale: number =\n      (this.dimensions.x * browserWindow.viewportWidth) /\n        this.htmlElement.clientWidth;\n\n    this.htmlElement.style.transform =\n      `translate(${screenX}px, ${screenY}px)\n       rotate(${rotation}deg)\n       scale(${scale}, ${scale})`;\n  }\n}\n","import { Item } from '../engine/interfaces';\n\nimport BrowserWindow from '../engine/browser-window';\nimport DistanceMap from '../engine/physics/distance_map';\nimport Point2D from '../engine/geometry/point2d';\nimport Peg from '../engine/physics/peg';\nimport Sprite from '../engine/view/sprite';\nimport World from '../engine/world';\n\nexport default class Bird implements Item {\n  public readonly id: String;\n  public world: World;\n  public peg: Peg;\n  public sprite: Sprite;\n\n  private movementWish: Point2D;\n\n  constructor(id: String) {\n    this.id = id;\n\n    this.peg =\n      new Peg(\n        id + '--peg',\n        new Point2D(Math.random(), Math.random()),\n        new Point2D(Math.random(), Math.random()).normalize(0.0002),\n      );\n    this.sprite =\n      new Sprite(document.documentElement, 'bird', new Point2D(0.005, 0.005));\n  }\n\n  plan(step: number): void {\n    let cohesionNeighborCount: number = 1;\n    let cohesionPosition: Point2D = this.peg.position;\n\n    let alignmentNeighborCount: number = 1;\n    let alignmentHeading: Point2D = this.peg.heading;\n\n    let separationNeighborCount: number = 0;\n    let separationPosition: Point2D = new Point2D(0, 0);\n\n    for (const item of this.world.getItems('bird')) {\n      if (item === this) continue;\n      const quadDistance = this.peg.position.quadDistance(item.peg.position)\n\n      if (quadDistance > 0.04) continue;\n      ++cohesionNeighborCount;\n      cohesionPosition = cohesionPosition.add(item.peg.position);\n\n      if (quadDistance > 0.01) continue;\n      ++alignmentNeighborCount;\n      alignmentHeading = alignmentHeading.add(item.peg.heading);\n\n      if (quadDistance > 0.00025) continue;\n      ++separationNeighborCount;\n      separationPosition =\n        separationPosition.add(\n          item.peg.position.substract(this.peg.position)\n        );\n    }\n\n    const cohesionDirection: Point2D =\n      cohesionNeighborCount > 1\n        ? cohesionPosition\n            .divide(cohesionNeighborCount)\n            .substract(this.peg.position)\n            .normalize(1)\n        : this.peg.heading.normalize(1);\n    const alignmentDirection: Point2D =\n      alignmentHeading\n        .divide(alignmentNeighborCount)\n        .normalize(4)\n    const separationDirection: Point2D =\n      separationNeighborCount > 0\n        ? separationPosition\n            .divide(separationNeighborCount)\n            .negate()\n            .normalize(2)\n        : this.peg.heading.normalize(2);\n\n    this.movementWish =\n      cohesionDirection\n        .add(alignmentDirection)\n        .add(separationDirection)\n        .normalize(0.0002);\n  }\n\n  move(step: number, boardRatio: number): void {\n    this.peg.heading = this.movementWish;\n\n    this.peg\n      .executeMovement(step)\n      .bounceOfWalls(boardRatio);\n  }\n\n  render(browserWindow: BrowserWindow): void {\n    this.sprite.render(browserWindow, this.peg.position, this.peg.heading);\n  }\n}\n","import Point2D from '../geometry/point2d';\nimport Peg from './peg';\n\nexport default class DistanceMap {\n  private distance: Map<String, Map<String, Number>>;\n\n  constructor() {\n    this.distance = new Map();\n  }\n\n  distanceBetween(peg1: Peg, peg2: Peg): Number {\n    if (!this.distance.get(peg1.id)) this.distance.set(peg1.id, new Map());\n\n    const savedDistance: Number = this.distance.get(peg1.id).get(peg2.id);\n    if (savedDistance) {\n      return savedDistance;\n    } else {\n      const calculatedDistance = peg1.position.quadDistance(peg2.position);\n      this.distance.get(peg1.id).set(peg2.id, calculatedDistance);\n\n      if (!this.distance.get(peg2.id)) this.distance.set(peg2.id, new Map());\n      this.distance.get(peg2.id).set(peg1.id, calculatedDistance);\n\n      return calculatedDistance;\n    }\n  }\n}\n","import { Item } from '../engine/interfaces';\n\nimport BrowserWindow from '../engine/browser-window';\nimport Point2D from '../engine/geometry/point2d';\nimport Peg from '../engine/physics/peg';\nimport Sprite from '../engine/view/sprite';\nimport World from '../engine/world';\n\nexport default class Hunter implements Item {\n  public readonly id: String;\n  public world: World;\n  public peg: Peg;\n  public sprite: Sprite;\n\n  private movementWish: Point2D;\n\n  constructor(id: String) {\n    this.id = id;\n    this.peg =\n      new Peg(\n        'hunter--peg',\n        new Point2D(0, 0),\n        new Point2D(1, 1).normalize(0.0004));\n    this.sprite =\n      new Sprite(document.documentElement, 'hunter', new Point2D(0.05, 0.05));\n  }\n\n  plan(step: number): void {\n    const birds: Array<Item> = this.world.getItems('bird');\n\n    let nearestDistance: number = 1;\n    let nearestBird: Item = null;\n    for (const bird of birds) {\n      const distance: number = this.peg.position.quadDistance(bird.peg.position);\n      if (distance < nearestDistance) {\n        nearestDistance = distance;\n        nearestBird = bird;\n      }\n    }\n\n    const directionToBird: Point2D = nearestBird.peg.position.substract(this.peg.position);\n    this.movementWish = this.peg.heading.rotateTowards(directionToBird, step / 3);\n  }\n\n  move(step: number, boardRatio: number): void {\n    this.peg.heading = this.movementWish;\n\n    this.peg\n      .executeMovement(step)\n      .bounceOfWalls(boardRatio);\n  }\n\n  render(browserWindow: BrowserWindow): void {\n    this.sprite.render(browserWindow, this.peg.position, this.peg.heading);\n  }\n}\n","import Engine from './engine';\nimport Bird from './flock/bird';\nimport DistanceMap from './engine/physics/distance_map';\nimport Hunter from './flock/hunter';\n\nconst engine: Engine = new Engine();\n\nconst birdsDistanceMap = new DistanceMap();\n\nengine\n  .spawn(new Bird('bird1'), ['bird'])\n  .spawn(new Bird('bird2'), ['bird'])\n  .spawn(new Bird('bird3'), ['bird'])\n  .spawn(new Bird('bird4'), ['bird'])\n  .spawn(new Bird('bird5'), ['bird'])\n  .spawn(new Bird('bird6'), ['bird'])\n  .spawn(new Bird('bird7'), ['bird'])\n  .spawn(new Bird('bird8'), ['bird'])\n  .spawn(new Bird('bird9'), ['bird'])\n  .spawn(new Bird('bird10'), ['bird'])\n  .spawn(new Bird('bird11'), ['bird'])\n  .spawn(new Bird('bird12'), ['bird'])\n  .spawn(new Bird('bird13'), ['bird'])\n  .spawn(new Bird('bird14'), ['bird'])\n  .spawn(new Bird('bird15'), ['bird'])\n  .spawn(new Bird('bird16'), ['bird'])\n  .spawn(new Bird('bird17'), ['bird'])\n  .spawn(new Bird('bird18'), ['bird'])\n  .spawn(new Bird('bird19'), ['bird'])\n  .spawn(new Bird('bird20'), ['bird'])\n  .spawn(new Bird('bird21'), ['bird'])\n  .spawn(new Bird('bird22'), ['bird'])\n  .spawn(new Bird('bird23'), ['bird'])\n  .spawn(new Bird('bird24'), ['bird'])\n  .spawn(new Bird('bird25'), ['bird'])\n  .spawn(new Bird('bird26'), ['bird'])\n  .spawn(new Bird('bird27'), ['bird'])\n  .spawn(new Bird('bird28'), ['bird'])\n  .spawn(new Bird('bird29'), ['bird'])\n  .spawn(new Bird('bird30'), ['bird'])\n  .spawn(new Bird('bird31'), ['bird'])\n  .spawn(new Bird('bird32'), ['bird'])\n  .spawn(new Bird('bird33'), ['bird'])\n  .spawn(new Bird('bird34'), ['bird'])\n  .spawn(new Bird('bird35'), ['bird'])\n  .spawn(new Bird('bird36'), ['bird'])\n  .spawn(new Bird('bird37'), ['bird'])\n  .spawn(new Bird('bird38'), ['bird'])\n  .spawn(new Bird('bird39'), ['bird'])\n  .spawn(new Bird('bird40'), ['bird'])\n  .spawn(new Hunter('hunter'))\n  .start();\n"]}