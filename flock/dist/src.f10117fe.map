{"version":3,"sources":["src/engine/browser-window.ts","src/engine/index.ts","src/engine/geometry/point2d.ts","src/engine/view/sprite.ts","src/flock/bird.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.f10117fe.map","sourceRoot":"..","sourcesContent":["export default class BrowserWindow {\n  private _htmlDocument : HTMLElement;\n  private _viewportWidth : number;\n  private _viewportHeight : number;\n  private _viewportRatio : number;\n\n  constructor() {\n    this._htmlDocument = document.documentElement;\n    this.update();\n  }\n\n  get viewportWidth() : number { return this._viewportWidth };\n  get viewportHeight() : number { return this._viewportHeight };\n  get viewportRatio() : number { return this._viewportRatio };\n\n  public update() : void {\n    this._viewportWidth = this._htmlDocument.clientWidth;\n    this._viewportHeight = this._htmlDocument.clientHeight;\n    this._viewportRatio = this._viewportHeight / this.viewportWidth;\n  }\n}\n","import { Item } from './interfaces';\n\nimport BrowserWindow from './browser-window';\n\nexport default class Engine {\n  private items: Array<Item>;\n  private browserWindow: BrowserWindow;\n\n  constructor() {\n    this.items = [];\n\n    this.browserWindow = new BrowserWindow();\n  }\n\n  spawn(item: Item): Engine {\n    this.items.push(item);\n\n    return this;\n  }\n\n  start(): void {\n    const loop = (timestamp: number): void => {\n      this.browserWindow.update();\n\n      this\n        .update(timestamp - lastRender)\n        .render();\n\n      lastRender = timestamp;\n      window.requestAnimationFrame(loop);\n    };\n\n    let lastRender = 0;\n    window.requestAnimationFrame(loop);\n  }\n\n  // private --------\n\n  private update(step: number): Engine {\n    for (const item of this.items) {\n      item.update(step, this.browserWindow.viewportRatio);\n    }\n\n    return this;\n  };\n\n  private render(): Engine {\n    for (const item of this.items) {\n      item.render(this.browserWindow)\n    };\n\n    return this;\n  }\n}\n","export default class Point2D {\n  public x: number;\n  public y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  clone(): Point2D {\n    return new Point2D(this.x, this.y);\n  }\n\n  add(other: Point2D): Point2D {\n    return new Point2D(this.x + other.x, this.y + other.y);\n  }\n\n  substract(other: Point2D): Point2D {\n    return new Point2D(this.x - other.x, this.y - other.y);\n  }\n\n  multiply(scalar: number): Point2D {\n    return new Point2D(this.x * scalar, this.y * scalar);\n  }\n\n  divide(scalar: number): Point2D {\n    return new Point2D(this.x / scalar, this.y / scalar);\n  }\n\n  mirrorHorizontal(): Point2D {\n    return new Point2D(this.x, -this.y);\n  }\n\n  mirrorVertical(): Point2D {\n    return new Point2D(-this.x, this.y);\n  }\n\n  negate(): Point2D {\n    return new Point2D(-this.x, -this.y);\n  }\n\n  length(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize(): Point2D {\n    return this.divide(this.length());\n  }\n\n  dot(other: Point2D): number {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  orientationDeg(): number {\n    return (this.x < 0 ? 270 : 90) - this.angleRad() * 180/Math.PI;\n  }\n\n  orientationRad(): number {\n    return (this.x < 0 ? 3/2*Math.PI : 1/2*Math.PI) - this.angleRad();\n  }\n\n  // private --------\n\n  private angleRad(): number {\n    return Math.atan(this.x / this.y);\n  }\n}\n","import BrowserWindow from \"../browser-window\";\nimport Point2D from \"../geometry/point2d\";\n\nexport default class Sprite {\n  private htmlElement: HTMLElement;\n  private dimensions: Point2D;\n\n  constructor(\n    parentElement: HTMLElement,\n    cssClass: string,\n    dimensions: Point2D,\n  ) {\n    this.dimensions = dimensions;\n    this.htmlElement = document.createElement('div');\n    this.htmlElement.className = cssClass;\n\n    this.htmlElement.style.position = 'absolute';\n    this.htmlElement.style.top = '0';\n    this.htmlElement.style.left = '0';\n\n    parentElement.appendChild(this.htmlElement);\n  }\n\n  render(\n    browserWindow: BrowserWindow,\n    position: Point2D,\n    heading: Point2D = null,\n  ) {\n    const width: number = this.dimensions.x * browserWindow.viewportWidth;\n    const height: number = this.dimensions.y * browserWindow.viewportWidth;\n    const screenX: number =\n      (position.x - this.dimensions.x / 2) * browserWindow.viewportWidth;\n    const screenY: number =\n      browserWindow.viewportHeight -\n        ((position.y + this.dimensions.y / 2) * browserWindow.viewportWidth);\n      const rotation: number = heading ? heading.orientationDeg() : 0;\n\n    this.htmlElement.style.width =`${width}px`;\n    this.htmlElement.style.height = `${height}px`;\n    this.htmlElement.style.transform =\n      `translate(${screenX}px, ${screenY}px) rotate(${rotation}deg)`;\n\n    this.htmlElement.innerText = rotation.toString();\n  }\n}\n","import { Item } from '../engine/interfaces';\n\nimport BrowserWindow from '../engine/browser-window';\nimport Point2D from '../engine/geometry/point2d';\nimport Sprite from '../engine/view/sprite';\n\nexport default class Bird implements Item {\n  private position: Point2D;\n  private heading: Point2D;\n\n  private sprite: Sprite;\n\n  constructor() {\n    this.position = new Point2D(0, 0);\n    this.heading = new Point2D(0.0002, 0.0002);\n    this.sprite =\n      new Sprite(document.documentElement, 'bird', new Point2D(0.05, 0.05));\n  }\n\n  update(step: number, boardRatio: number): void {\n    this.position =\n      this.position.add(\n        new Point2D(step * this.heading.x, step * this.heading.y),\n      );\n\n    if (this.position.x < 0 || this.position.x > 1) {\n      this.heading = this.heading.mirrorVertical();\n    }\n\n    if (this.position.y < 0 || this.position.y > boardRatio) {\n      this.heading = this.heading.mirrorHorizontal();\n    }\n  }\n\n  render(browserWindow: BrowserWindow): void {\n    this.sprite.render(browserWindow, this.position, this.heading);\n  }\n}\n","import Engine from './engine';\nimport Bird from './flock/bird';\n\nconst engine = new Engine();\n\nengine\n  .spawn(new Bird())\n  .start();\n"]}