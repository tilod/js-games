{"version":3,"sources":["src/engine/browser-window.ts","src/engine/world.ts","src/engine/index.ts","src/engine/geometry/point2d.ts","src/engine/physics/peg.ts","src/engine/view/sprite.ts","src/flock/bird.ts","src/engine/physics/distance_map.ts","src/flock/hunter.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.f10117fe.map","sourceRoot":"..","sourcesContent":["export default class BrowserWindow {\n  private _htmlDocument : HTMLElement;\n  private _viewportWidth : number;\n  private _viewportHeight : number;\n  private _viewportRatio : number;\n\n  constructor() {\n    this._htmlDocument = document.documentElement;\n    this.update();\n  }\n\n  get viewportWidth() : number { return this._viewportWidth };\n  get viewportHeight() : number { return this._viewportHeight };\n  get viewportRatio() : number { return this._viewportRatio };\n\n  public update() : void {\n    this._viewportWidth = this._htmlDocument.clientWidth;\n    this._viewportHeight = this._htmlDocument.clientHeight;\n    this._viewportRatio = this._viewportHeight / this.viewportWidth;\n  }\n}\n","import { Item } from './interfaces';\n\nexport default class World {\n  static readonly ALL_ITEMS = '__all__';\n\n  private items: Map<String, Array<Item>>;\n\n  constructor() {\n    this.items = new Map();\n    this.items.set(World.ALL_ITEMS, []);\n  }\n\n  addItem(item: Item, tags: Array<String>): void {\n    this.items.get(World.ALL_ITEMS).push(item);\n\n    for (const tag of tags) {\n      const tagList: Array<Item> = this.items.get(tag);\n      if (tagList) {\n        tagList.push(item)\n      } else {\n        this.items.set(tag, [item]);\n      }\n    }\n  }\n\n  getItems(tag: String = World.ALL_ITEMS): Array<Item> {\n    return this.items.get(tag);\n  }\n}\n","import BrowserWindow from './browser-window';\nimport World from './world';\n\nimport { Item } from './interfaces';\n\nexport default class Engine {\n  private browserWindow: BrowserWindow;\n  private world: World;\n\n  constructor() {\n    this.browserWindow = new BrowserWindow();\n    this.world = new World();\n  }\n\n\n  spawn(item: Item, tags: Array<String> = []): Engine {\n    item.world = this.world;\n    this.world.addItem(item, tags);\n\n    return this;\n  }\n\n  start(): void {\n    const loop = (timestamp: number): void => {\n      this.browserWindow.update();\n\n      const step = timestamp - lastRender;\n\n      this\n        .plan(step)\n        .move(step)\n        .render();\n\n      lastRender = timestamp;\n      window.requestAnimationFrame(loop);\n    };\n\n    let lastRender = 0;\n    window.requestAnimationFrame(loop);\n  }\n\n\n  private plan(step: number): Engine {\n    for (const item of this.world.getItems()) {\n      item.plan(step);\n    }\n\n    return this;\n  };\n\n  private move(step: number): Engine {\n    for (const item of this.world.getItems()) {\n      item.move(step, this.browserWindow.viewportRatio);\n    }\n\n    return this;\n  };\n\n  private render(): Engine {\n    for (const item of this.world.getItems()) {\n      item.render(this.browserWindow)\n    };\n\n    return this;\n  }\n}\n","export default class Point2D {\n  public x: number;\n  public y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static center(points: Array<Point2D>): Point2D {\n    if (points.length === 1) {\n      return points[0];\n    } else {\n      return points\n        .reduce((centerPoint, point) => centerPoint.add(point))\n        .divide(points.length);\n    }\n  }\n\n  clone(): Point2D {\n    return new Point2D(this.x, this.y);\n  }\n\n  add(other: Point2D): Point2D {\n    return new Point2D(this.x + other.x, this.y + other.y);\n  }\n\n  substract(other: Point2D): Point2D {\n    return new Point2D(this.x - other.x, this.y - other.y);\n  }\n\n  multiply(scalar: number): Point2D {\n    return new Point2D(this.x * scalar, this.y * scalar);\n  }\n\n  divide(scalar: number): Point2D {\n    return new Point2D(this.x / scalar, this.y / scalar);\n  }\n\n  mirrorHorizontal(): Point2D {\n    return new Point2D(this.x, -this.y);\n  }\n\n  mirrorVertical(): Point2D {\n    return new Point2D(-this.x, this.y);\n  }\n\n  negate(): Point2D {\n    return new Point2D(-this.x, -this.y);\n  }\n\n  rotateDeg(angle: number): Point2D {\n    return this.rotateRad(angle * Math.PI / 180);\n  }\n\n  rotateDegMax(angle: number, maxTurnRate: number): Point2D {\n    if (angle > maxTurnRate) return this.rotateDeg(maxTurnRate);\n    if (angle < -maxTurnRate) return this.rotateDeg(-maxTurnRate);\n\n    return this.rotateDeg(angle);\n  }\n\n  rotateRad(angle: number): Point2D {\n    const sin: number = Math.sin(angle);\n    const cos: number = Math.cos(angle);\n\n    return new Point2D(\n      cos * this.x - sin * this.y,\n      sin * this.x + cos * this.y,\n    );\n  }\n\n  rotateRadMax(angle: number, maxTurnRate: number): Point2D {\n    if (angle > maxTurnRate) return this.rotateRad(maxTurnRate);\n    if (angle < -maxTurnRate) return this.rotateRad(-maxTurnRate);\n\n    return this.rotateRad(angle);\n  }\n\n  rotateTowards(other: Point2D, maxTurnRate: number): Point2D {\n    return this.rotateDegMax(\n      other.orientationDeg() - this.orientationDeg(),\n      maxTurnRate,\n    );\n  }\n\n  length(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize(length: number = 1): Point2D {\n    return this.divide(this.length() / length);\n  }\n\n  dot(other: Point2D): number {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  orientationDeg(): number {\n    return (this.y < 0 ? 180 : 0) - this.angleRad() * 180/Math.PI;\n  }\n\n  orientationRad(): number {\n    return (this.y < 0 ? Math.PI : 0) - this.angleRad();\n  }\n\n  quadDistance(other: Point2D): number {\n    return Math.pow(other.x - this.x, 2) + Math.pow(other.y - this.y, 2)\n  }\n\n  distance(other: Point2D): number {\n    return Math.sqrt(this.quadDistance(other));\n  }\n\n  // private --------\n\n  private angleRad(): number {\n    return Math.atan(this.x / this.y);\n  }\n}\n","import Point2D from '../geometry/point2d';\n\nexport default class Peg {\n  public readonly id: String;\n  public position: Point2D;\n  public heading: Point2D;\n\n  constructor(\n    id: String,\n    position: Point2D = new Point2D(0, 0),\n    heading: Point2D = new Point2D(0, 0),\n  ) {\n    this.id = id;\n    this.position = position;\n    this.heading = heading;\n  }\n\n  executeMovement(step: number): Peg {\n    this.position =\n      this.position.add(\n        new Point2D(step * this.heading.x, step * this.heading.y),\n      );\n\n    return this;\n  }\n\n  bounceOfWalls(boardRatio: number): Peg {\n    if ((this.position.x < 0 && this.heading.x < 0) ||\n        (this.position.x > 1 && this.heading.x > 0)) {\n      this.heading = this.heading.mirrorVertical();\n    }\n\n    if ((this.position.y < 0 && this.heading.y < 0) ||\n        (this.position.y > boardRatio && this.heading.y > 0)) {\n      this.heading = this.heading.mirrorHorizontal();\n    }\n\n    return this;\n  }\n}\n","import BrowserWindow from \"../browser-window\";\nimport Point2D from \"../geometry/point2d\";\n\nexport default class Sprite {\n  private htmlElement: HTMLElement;\n  private dimensions: Point2D;\n\n  constructor(\n    parentElement: HTMLElement,\n    cssClass: string,\n    dimensions: Point2D,\n  ) {\n    this.dimensions = dimensions;\n    this.htmlElement = document.createElement('div');\n    this.htmlElement.className = cssClass;\n\n    this.htmlElement.style.position = 'absolute';\n    this.htmlElement.style.top = '0';\n    this.htmlElement.style.left = '0';\n\n    parentElement.appendChild(this.htmlElement);\n  }\n\n  render(\n    browserWindow: BrowserWindow,\n    position: Point2D,\n    heading: Point2D = null,\n  ) {\n    const screenX: number =\n      (position.x - this.dimensions.x / 2) * browserWindow.viewportWidth;\n    const screenY: number =\n      browserWindow.viewportHeight -\n        ((position.y + this.dimensions.y / 2) * browserWindow.viewportWidth);\n    const rotation: number = heading ? -heading.orientationDeg() : 0;\n    const scale: number =\n      (this.dimensions.x * browserWindow.viewportWidth) /\n        this.htmlElement.clientWidth;\n\n    this.htmlElement.style.transform =\n      `translate(${screenX}px, ${screenY}px)\n       rotate(${rotation}deg)\n       scale(${scale}, ${scale})`;\n  }\n}\n","import { Item } from '../engine/interfaces';\n\nimport BrowserWindow from '../engine/browser-window';\nimport DistanceMap from '../engine/physics/distance_map';\nimport Point2D from '../engine/geometry/point2d';\nimport Peg from '../engine/physics/peg';\nimport Sprite from '../engine/view/sprite';\nimport World from '../engine/world';\n\nexport default class Bird implements Item {\n  public readonly id: String;\n  public world: World;\n  public peg: Peg;\n  public sprite: Sprite;\n\n  private movementWish: Point2D;\n\n  constructor(id: String) {\n    this.id = id;\n\n    this.peg =\n      new Peg(\n        id + '--peg',\n        new Point2D(Math.random(), Math.random()),\n        new Point2D(Math.random(), Math.random()).normalize(0.0002),\n      );\n    this.sprite =\n      new Sprite(document.documentElement, 'bird', new Point2D(0.005, 0.005));\n  }\n\n  plan(step: number): void {\n    let cohesionNeighborCount: number = 1;\n    let cohesionPosition: Point2D = this.peg.position;\n\n    let alignmentNeighborCount: number = 1;\n    let alignmentHeading: Point2D = this.peg.heading;\n\n    let separationNeighborCount: number = 0;\n    let separationPosition: Point2D = new Point2D(0, 0);\n\n    for (const item of this.world.getItems('bird')) {\n      if (item === this) continue;\n      const quadDistance = this.peg.position.quadDistance(item.peg.position)\n\n      if (quadDistance > 0.04) continue;\n      ++cohesionNeighborCount;\n      cohesionPosition = cohesionPosition.add(item.peg.position);\n\n      if (quadDistance > 0.01) continue;\n      ++alignmentNeighborCount;\n      alignmentHeading = alignmentHeading.add(item.peg.heading);\n\n      if (quadDistance > 0.00025) continue;\n      ++separationNeighborCount;\n      separationPosition =\n        separationPosition.add(\n          item.peg.position.substract(this.peg.position)\n        );\n    }\n\n    const cohesionDirection: Point2D =\n      cohesionNeighborCount > 1\n        ? cohesionPosition\n            .divide(cohesionNeighborCount)\n            .substract(this.peg.position)\n            .normalize(1)\n        : this.peg.heading.normalize(1);\n    const alignmentDirection: Point2D =\n      alignmentHeading\n        .divide(alignmentNeighborCount)\n        .normalize(4)\n    const separationDirection: Point2D =\n      separationNeighborCount > 0\n        ? separationPosition\n            .divide(separationNeighborCount)\n            .negate()\n            .normalize(2)\n        : this.peg.heading.normalize(2);\n\n    this.movementWish =\n      cohesionDirection\n        .add(alignmentDirection)\n        .add(separationDirection)\n        .normalize(0.0002);\n  }\n\n  move(step: number, boardRatio: number): void {\n    this.peg.heading = this.movementWish;\n\n    this.peg\n      .executeMovement(step)\n      .bounceOfWalls(boardRatio);\n  }\n\n  render(browserWindow: BrowserWindow): void {\n    this.sprite.render(browserWindow, this.peg.position, this.peg.heading);\n  }\n}\n","import Point2D from '../geometry/point2d';\nimport Peg from './peg';\n\nexport default class DistanceMap {\n  private distance: Map<String, Map<String, Number>>;\n\n  constructor() {\n    this.distance = new Map();\n  }\n\n  distanceBetween(peg1: Peg, peg2: Peg): Number {\n    if (!this.distance.get(peg1.id)) this.distance.set(peg1.id, new Map());\n\n    const savedDistance: Number = this.distance.get(peg1.id).get(peg2.id);\n    if (savedDistance) {\n      return savedDistance;\n    } else {\n      const calculatedDistance = peg1.position.quadDistance(peg2.position);\n      this.distance.get(peg1.id).set(peg2.id, calculatedDistance);\n\n      if (!this.distance.get(peg2.id)) this.distance.set(peg2.id, new Map());\n      this.distance.get(peg2.id).set(peg1.id, calculatedDistance);\n\n      return calculatedDistance;\n    }\n  }\n}\n","import { Item } from '../engine/interfaces';\n\nimport BrowserWindow from '../engine/browser-window';\nimport Point2D from '../engine/geometry/point2d';\nimport Peg from '../engine/physics/peg';\nimport Sprite from '../engine/view/sprite';\nimport World from '../engine/world';\n\nexport default class Hunter implements Item {\n  public readonly id: String;\n  public world: World;\n  public peg: Peg;\n  public sprite: Sprite;\n\n  private movementWish: Point2D;\n\n  constructor(id: String) {\n    this.id = id;\n    this.peg =\n      new Peg(\n        'hunter--peg',\n        new Point2D(0, 0),\n        new Point2D(1, 1).normalize(0.0004));\n    this.sprite =\n      new Sprite(document.documentElement, 'hunter', new Point2D(0.05, 0.05));\n  }\n\n  plan(step: number): void {\n    const birds: Array<Item> = this.world.getItems('bird');\n\n    let nearestDistance: number = 1;\n    let nearestBird: Item = null;\n    for (const bird of birds) {\n      const distance: number = this.peg.position.quadDistance(bird.peg.position);\n      if (distance < nearestDistance) {\n        nearestDistance = distance;\n        nearestBird = bird;\n      }\n    }\n\n    const directionToBird: Point2D = nearestBird.peg.position.substract(this.peg.position);\n    this.movementWish = this.peg.heading.rotateTowards(directionToBird, step / 3);\n  }\n\n  move(step: number, boardRatio: number): void {\n    this.peg.heading = this.movementWish;\n\n    this.peg\n      .executeMovement(step)\n      .bounceOfWalls(boardRatio);\n  }\n\n  render(browserWindow: BrowserWindow): void {\n    this.sprite.render(browserWindow, this.peg.position, this.peg.heading);\n  }\n}\n","import Engine from './engine';\nimport Bird from './flock/bird';\nimport DistanceMap from './engine/physics/distance_map';\nimport Hunter from './flock/hunter';\n\nconst engine: Engine = new Engine();\n\nconst birdsDistanceMap = new DistanceMap();\n\nengine\n  .spawn(new Bird('bird1'), ['bird'])\n  .spawn(new Bird('bird2'), ['bird'])\n  .spawn(new Bird('bird3'), ['bird'])\n  .spawn(new Bird('bird4'), ['bird'])\n  .spawn(new Bird('bird5'), ['bird'])\n  .spawn(new Bird('bird6'), ['bird'])\n  .spawn(new Bird('bird7'), ['bird'])\n  .spawn(new Bird('bird8'), ['bird'])\n  .spawn(new Bird('bird9'), ['bird'])\n  .spawn(new Bird('bird10'), ['bird'])\n  .spawn(new Bird('bird11'), ['bird'])\n  .spawn(new Bird('bird12'), ['bird'])\n  .spawn(new Bird('bird13'), ['bird'])\n  .spawn(new Bird('bird14'), ['bird'])\n  .spawn(new Bird('bird15'), ['bird'])\n  .spawn(new Bird('bird16'), ['bird'])\n  .spawn(new Bird('bird17'), ['bird'])\n  .spawn(new Bird('bird18'), ['bird'])\n  .spawn(new Bird('bird19'), ['bird'])\n  .spawn(new Bird('bird20'), ['bird'])\n  .spawn(new Bird('bird21'), ['bird'])\n  .spawn(new Bird('bird22'), ['bird'])\n  .spawn(new Bird('bird23'), ['bird'])\n  .spawn(new Bird('bird24'), ['bird'])\n  .spawn(new Bird('bird25'), ['bird'])\n  .spawn(new Bird('bird26'), ['bird'])\n  .spawn(new Bird('bird27'), ['bird'])\n  .spawn(new Bird('bird28'), ['bird'])\n  .spawn(new Bird('bird29'), ['bird'])\n  .spawn(new Bird('bird30'), ['bird'])\n  .spawn(new Bird('bird31'), ['bird'])\n  .spawn(new Bird('bird32'), ['bird'])\n  .spawn(new Bird('bird33'), ['bird'])\n  .spawn(new Bird('bird34'), ['bird'])\n  .spawn(new Bird('bird35'), ['bird'])\n  .spawn(new Bird('bird36'), ['bird'])\n  .spawn(new Bird('bird37'), ['bird'])\n  .spawn(new Bird('bird38'), ['bird'])\n  .spawn(new Bird('bird39'), ['bird'])\n  .spawn(new Bird('bird40'), ['bird'])\n  .spawn(new Hunter('hunter'))\n  .start();\n"]}