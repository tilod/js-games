{"version":3,"sources":["src/engine/browser-window.ts","src/engine/world.ts","src/engine/index.ts","src/engine/geometry/point2d.ts","src/engine/physics/peg.ts","src/engine/view/sprite.ts","src/flock/bird.ts","src/flock/hunter.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.f10117fe.map","sourceRoot":"..","sourcesContent":["export default class BrowserWindow {\n  private _htmlDocument : HTMLElement;\n  private _viewportWidth : number;\n  private _viewportHeight : number;\n  private _viewportRatio : number;\n\n  constructor() {\n    this._htmlDocument = document.documentElement;\n    this.update();\n  }\n\n  get viewportWidth() : number { return this._viewportWidth };\n  get viewportHeight() : number { return this._viewportHeight };\n  get viewportRatio() : number { return this._viewportRatio };\n\n  public update() : void {\n    this._viewportWidth = this._htmlDocument.clientWidth;\n    this._viewportHeight = this._htmlDocument.clientHeight;\n    this._viewportRatio = this._viewportHeight / this.viewportWidth;\n  }\n}\n","import { Item } from './interfaces';\n\nexport default class World {\n  static readonly ALL_ITEMS = '__all__';\n\n  private items: Map<String, Array<Item>>;\n\n  constructor() {\n    this.items = new Map();\n    this.items.set(World.ALL_ITEMS, []);\n  }\n\n  addItem(item: Item, tags: Array<String>): void {\n    this.items.get(World.ALL_ITEMS).push(item);\n\n    for (const tag of tags) {\n      const tagList: Array<Item> = this.items.get(tag);\n      if (tagList) {\n        tagList.push(item)\n      } else {\n        this.items.set(tag, [item]);\n      }\n    }\n  }\n\n  getItems(tag: String = World.ALL_ITEMS): Array<Item> {\n    return this.items.get(tag);\n  }\n}\n","import BrowserWindow from './browser-window';\nimport World from './world';\n\nimport { Item } from './interfaces';\n\nexport default class Engine {\n  private browserWindow: BrowserWindow;\n  private world: World;\n\n  constructor() {\n    this.browserWindow = new BrowserWindow();\n    this.world = new World();\n  }\n\n  spawn(item: Item, tags: Array<String> = []): Engine {\n    item.world = this.world;\n    this.world.addItem(item, tags);\n\n    return this;\n  }\n\n  start(): void {\n    const loop = (timestamp: number): void => {\n      this.browserWindow.update();\n\n      this\n        .update(timestamp - lastRender)\n        .render();\n\n      lastRender = timestamp;\n      window.requestAnimationFrame(loop);\n    };\n\n    let lastRender = 0;\n    window.requestAnimationFrame(loop);\n  }\n\n  // private --------\n\n  private update(step: number): Engine {\n    for (const item of this.world.getItems()) {\n      item.update(step, this.browserWindow.viewportRatio);\n    }\n\n    return this;\n  };\n\n  private render(): Engine {\n    for (const item of this.world.getItems()) {\n      item.render(this.browserWindow)\n    };\n\n    return this;\n  }\n}\n","export default class Point2D {\n  public x: number;\n  public y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static center(points: Array<Point2D>): Point2D {\n    if (points.length === 1) {\n      return points[0];\n    } else {\n      return points\n        .reduce((centerPoint, point) => centerPoint.add(point))\n        .divide(points.length);\n    }\n  }\n\n  clone(): Point2D {\n    return new Point2D(this.x, this.y);\n  }\n\n  add(other: Point2D): Point2D {\n    return new Point2D(this.x + other.x, this.y + other.y);\n  }\n\n  substract(other: Point2D): Point2D {\n    return new Point2D(this.x - other.x, this.y - other.y);\n  }\n\n  multiply(scalar: number): Point2D {\n    return new Point2D(this.x * scalar, this.y * scalar);\n  }\n\n  divide(scalar: number): Point2D {\n    return new Point2D(this.x / scalar, this.y / scalar);\n  }\n\n  mirrorHorizontal(): Point2D {\n    return new Point2D(this.x, -this.y);\n  }\n\n  mirrorVertical(): Point2D {\n    return new Point2D(-this.x, this.y);\n  }\n\n  negate(): Point2D {\n    return new Point2D(-this.x, -this.y);\n  }\n\n  rotateDeg(angle: number): Point2D {\n    return this.rotateRad(angle * Math.PI / 180);\n  }\n\n  rotateRad(angle: number): Point2D {\n    const sin: number = Math.sin(angle);\n    const cos: number = Math.cos(angle);\n\n    return new Point2D(\n      cos * this.x - sin * this.y,\n      sin * this.x + cos * this.y,\n    );\n  }\n\n  length(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize(): Point2D {\n    return this.divide(this.length());\n  }\n\n  dot(other: Point2D): number {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  orientationDeg(): number {\n    return (this.y < 0 ? 180 : 0) - this.angleRad() * 180/Math.PI;\n  }\n\n  orientationRad(): number {\n    return (this.y < 0 ? Math.PI : 0) - this.angleRad();\n  }\n\n  quadDistance(other: Point2D): number {\n    return Math.pow(other.x - this.x, 2) + Math.pow(other.y - this.y, 2)\n  }\n\n  distance(other: Point2D): number {\n    return Math.sqrt(this.quadDistance(other));\n  }\n\n  // private --------\n\n  private angleRad(): number {\n    return Math.atan(this.x / this.y);\n  }\n}\n","import Point2D from '../geometry/point2d';\n\nexport default class Peg {\n  public position: Point2D;\n  public heading: Point2D;\n\n  constructor(\n    position: Point2D = new Point2D(0, 0),\n    heading: Point2D = new Point2D(0, 0),\n  ) {\n    this.position = position;\n    this.heading = heading;\n  }\n\n  executeMovement(step: number): Peg {\n    this.position =\n      this.position.add(\n        new Point2D(step * this.heading.x, step * this.heading.y),\n      );\n\n    return this;\n  }\n\n  bounceOfWalls(boardRatio: number): Peg {\n    if ((this.position.x < 0 && this.heading.x < 0) ||\n        (this.position.x > 1 && this.heading.x > 0)) {\n      this.heading = this.heading.mirrorVertical();\n    }\n\n    if ((this.position.y < 0 && this.heading.y < 0) ||\n        (this.position.y > boardRatio && this.heading.y > 0)) {\n      this.heading = this.heading.mirrorHorizontal();\n    }\n\n    return this;\n  }\n}\n","import BrowserWindow from \"../browser-window\";\nimport Point2D from \"../geometry/point2d\";\n\nexport default class Sprite {\n  private htmlElement: HTMLElement;\n  private dimensions: Point2D;\n\n  constructor(\n    parentElement: HTMLElement,\n    cssClass: string,\n    dimensions: Point2D,\n  ) {\n    this.dimensions = dimensions;\n    this.htmlElement = document.createElement('div');\n    this.htmlElement.className = cssClass;\n\n    this.htmlElement.style.position = 'absolute';\n    this.htmlElement.style.top = '0';\n    this.htmlElement.style.left = '0';\n\n    parentElement.appendChild(this.htmlElement);\n  }\n\n  render(\n    browserWindow: BrowserWindow,\n    position: Point2D,\n    heading: Point2D = null,\n  ) {\n    const screenX: number =\n      (position.x - this.dimensions.x / 2) * browserWindow.viewportWidth;\n    const screenY: number =\n      browserWindow.viewportHeight -\n        ((position.y + this.dimensions.y / 2) * browserWindow.viewportWidth);\n    const rotation: number = heading ? -heading.orientationDeg() : 0;\n    const scale: number =\n      (this.dimensions.x * browserWindow.viewportWidth) /\n        this.htmlElement.clientWidth;\n\n    this.htmlElement.style.transform =\n      `translate(${screenX}px, ${screenY}px)\n       rotate(${rotation}deg)\n       scale(${scale}, ${scale})`;\n  }\n}\n","import { Item } from '../engine/interfaces';\n\nimport BrowserWindow from '../engine/browser-window';\nimport Point2D from '../engine/geometry/point2d';\nimport Peg from '../engine/physics/peg';\nimport Sprite from '../engine/view/sprite';\nimport World from '../engine/world';\n\nexport default class Bird implements Item {\n  public world: World;\n\n  public peg: Peg;\n  public sprite: Sprite;\n\n  private turnRate: number;\n\n  constructor(turnRate: number) {\n    this.turnRate = turnRate;\n\n    this.peg = new Peg(new Point2D(0, 0), new Point2D(0.0002, 0.0002));\n    this.sprite =\n      new Sprite(document.documentElement, 'bird', new Point2D(0.05, 0.05));\n  }\n\n  update(step: number, boardRatio: number): void {\n    this.peg.heading = this.peg.heading.rotateDeg(this.turnRate);\n\n    this.peg\n      .executeMovement(step)\n      .bounceOfWalls(boardRatio);\n  }\n\n  render(browserWindow: BrowserWindow): void {\n    this.sprite.render(browserWindow, this.peg.position, this.peg.heading);\n  }\n}\n","import { Item } from '../engine/interfaces';\n\nimport BrowserWindow from '../engine/browser-window';\nimport Point2D from '../engine/geometry/point2d';\nimport Peg from '../engine/physics/peg';\nimport Sprite from '../engine/view/sprite';\nimport World from '../engine/world';\n\nexport default class Hunter implements Item {\n  public world: World;\n\n  public peg: Peg;\n  public sprite: Sprite;\n\n  constructor() {\n    this.peg = new Peg(new Point2D(0, 0.5), new Point2D(0.0001, 0.0002));\n    this.sprite =\n      new Sprite(document.documentElement, 'hunter', new Point2D(0.1, 0.1));\n  }\n\n  update(step: number, boardRatio: number): void {\n    // follow the nearest bird --------\n    const birds: Array<Item> = this.world.getItems('bird');\n\n    let nearestDistance: number = 9999;\n    let nearestBird: Item = null;\n    for (const bird of birds) {\n      const distance: number = this.peg.position.quadDistance(bird.peg.position);\n      if (distance < nearestDistance) {\n        nearestDistance = distance;\n        nearestBird = bird;\n      }\n    }\n\n    const directionToBird: Point2D = nearestBird.peg.position.substract(this.peg.position);\n    const directionOrientation: number = directionToBird.orientationDeg();\n    const hunterOrientation: number = this.peg.heading.orientationDeg();\n    const orientationDiff: number = directionOrientation - hunterOrientation;\n    if (orientationDiff > 15) {\n      this.peg.heading = this.peg.heading.rotateDeg(15);\n    } else if (orientationDiff < -15) {\n      this.peg.heading = this.peg.heading.rotateDeg(-15);\n    } else {\n      this.peg.heading = this.peg.heading.rotateDeg(orientationDiff);\n    }\n    // --------\n\n    this.peg\n      .executeMovement(step)\n      .bounceOfWalls(boardRatio);\n  }\n\n  render(browserWindow: BrowserWindow): void {\n    this.sprite.render(browserWindow, this.peg.position, this.peg.heading);\n  }\n}\n","import Engine from './engine';\nimport Bird from './flock/bird';\nimport Hunter from './flock/hunter';\n\nconst engine = new Engine();\n\nengine\n  .spawn(new Bird(0.75), ['bird'])\n  .spawn(new Bird(-0.5), ['bird'])\n  .spawn(new Bird(0.25), ['bird'])\n  .spawn(new Hunter())\n  .start();\n"]}