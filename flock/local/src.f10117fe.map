{"version":3,"sources":["src/engine/browser-window.ts","src/engine/world.ts","src/engine/index.ts","src/engine/geometry/point2d.ts","src/engine/physics/peg.ts","src/engine/view/sprite.ts","src/engine/ai/flock_ai.ts","src/engine/ai/escape_nearest_ai.ts","src/flock/bird.ts","src/engine/ai/turn_to_three_nearest_ai.ts","src/flock/hunter.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.f10117fe.map","sourceRoot":"..","sourcesContent":["export default class BrowserWindow {\n  private _htmlDocument : HTMLElement;\n  private _viewportWidth : number;\n  private _viewportHeight : number;\n  private _viewportRatio : number;\n\n  constructor() {\n    this._htmlDocument = document.documentElement;\n    this.update();\n  }\n\n  get viewportWidth() : number { return this._viewportWidth };\n  get viewportHeight() : number { return this._viewportHeight };\n  get viewportRatio() : number { return this._viewportRatio };\n\n  public update() : void {\n    this._viewportWidth = this._htmlDocument.clientWidth;\n    this._viewportHeight = this._htmlDocument.clientHeight;\n    this._viewportRatio = this._viewportHeight / this.viewportWidth;\n  }\n}\n","import { Item } from './interfaces';\n\nexport default class World {\n  static readonly ALL_ITEMS = '__all__';\n\n  private items: Map<String, Array<Item>>;\n\n  constructor() {\n    this.items = new Map();\n    this.items.set(World.ALL_ITEMS, []);\n  }\n\n  addItem(item: Item, tags: Array<String>): void {\n    this.items.get(World.ALL_ITEMS).push(item);\n\n    for (const tag of tags) {\n      const tagList: Array<Item> = this.items.get(tag);\n      if (tagList) {\n        tagList.push(item)\n      } else {\n        this.items.set(tag, [item]);\n      }\n    }\n  }\n\n  getItems(tag: String = World.ALL_ITEMS): Array<Item> {\n    return this.items.get(tag);\n  }\n}\n","import BrowserWindow from './browser-window';\nimport World from './world';\n\nimport { Item } from './interfaces';\n\nexport default class Engine {\n  private _browserWindow: BrowserWindow;\n  private _world: World;\n\n  constructor() {\n    this._browserWindow = new BrowserWindow();\n    this._world = new World();\n  }\n\n\n  spawn(\n    itemConstructor: { new(world: World): Item },\n    tags: Array<String> = []\n  ): Engine {\n    this._world.addItem(new itemConstructor(this._world), tags);\n\n    return this;\n  }\n\n  start(): void {\n    const loop = (timestamp: number): void => {\n      this._browserWindow.update();\n\n      const step = timestamp - lastRender;\n\n      this\n        .plan()\n        .move(step)\n        .render();\n\n      lastRender = timestamp;\n      window.requestAnimationFrame(loop);\n    };\n\n    let lastRender = 0;\n    window.requestAnimationFrame(loop);\n  }\n\n\n  private plan(): Engine {\n    for (const item of this._world.getItems()) {\n      item.plan();\n    }\n\n    return this;\n  };\n\n  private move(step: number): Engine {\n    for (const item of this._world.getItems()) {\n      item.move(step, this._browserWindow.viewportRatio);\n    }\n\n    return this;\n  };\n\n  private render(): Engine {\n    for (const item of this._world.getItems()) {\n      item.render(this._browserWindow)\n    };\n\n    return this;\n  }\n}\n","export default class Point2D {\n  public x: number;\n  public y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static center(points: Array<Point2D>): Point2D {\n    if (points.length === 1) {\n      return points[0];\n    } else {\n      return points\n        .reduce((centerPoint, point) => centerPoint.add(point))\n        .divide(points.length);\n    }\n  }\n\n  clone(): Point2D {\n    return new Point2D(this.x, this.y);\n  }\n\n  add(other: Point2D): Point2D {\n    return new Point2D(this.x + other.x, this.y + other.y);\n  }\n\n  substract(other: Point2D): Point2D {\n    return new Point2D(this.x - other.x, this.y - other.y);\n  }\n\n  multiply(scalar: number): Point2D {\n    return new Point2D(this.x * scalar, this.y * scalar);\n  }\n\n  divide(scalar: number): Point2D {\n    return new Point2D(this.x / scalar, this.y / scalar);\n  }\n\n  mirrorHorizontal(): Point2D {\n    return new Point2D(this.x, -this.y);\n  }\n\n  mirrorVertical(): Point2D {\n    return new Point2D(-this.x, this.y);\n  }\n\n  negate(): Point2D {\n    return new Point2D(-this.x, -this.y);\n  }\n\n  rotateDeg(angle: number): Point2D {\n    return this.rotateRad(angle * Math.PI / 180);\n  }\n\n  rotateDegMax(angle: number, maxTurnRate: number): Point2D {\n    if (angle > maxTurnRate) return this.rotateDeg(maxTurnRate);\n    if (angle < -maxTurnRate) return this.rotateDeg(-maxTurnRate);\n\n    return this.rotateDeg(angle);\n  }\n\n  rotateRad(angle: number): Point2D {\n    const sin: number = Math.sin(angle);\n    const cos: number = Math.cos(angle);\n\n    return new Point2D(\n      cos * this.x - sin * this.y,\n      sin * this.x + cos * this.y,\n    );\n  }\n\n  rotateRadMax(angle: number, maxTurnRate: number): Point2D {\n    if (angle > maxTurnRate) return this.rotateRad(maxTurnRate);\n    if (angle < -maxTurnRate) return this.rotateRad(-maxTurnRate);\n\n    return this.rotateRad(angle);\n  }\n\n  length(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize(length: number = 1): Point2D {\n    return this.divide(this.length() / length);\n  }\n\n  dot(other: Point2D): number {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  angleRad(other: Point2D): number {\n    return Math.acos(this.dot(other) / (this.length() * other.length()));\n  }\n\n  angleDeg(other: Point2D): number {\n    return this.angleRad(other) * 180/Math.PI;\n  }\n\n  orientationDeg(): number {\n    return (this.y < 0 ? 180 : 0) - Math.atan(this.x / this.y) * 180/Math.PI;\n  }\n\n  orientationRad(): number {\n    return (this.y < 0 ? Math.PI : 0) - Math.atan(this.x / this.y);\n  }\n\n  quadDistance(other: Point2D): number {\n    return Math.pow(other.x - this.x, 2) + Math.pow(other.y - this.y, 2)\n  }\n\n  distance(other: Point2D): number {\n    return Math.sqrt(this.quadDistance(other));\n  }\n\n  interpolate(other: Point2D, loading: number) {\n    return this.multiply(1 - loading).add(other.multiply(loading));\n  }\n}\n","import Point2D from '../geometry/point2d';\n\nexport default class Peg {\n  public position: Point2D;\n  public heading: Point2D;\n\n  private _step: number;\n  private _boardRatio: number;\n  private _headingLength: number;\n\n  constructor(\n    position: Point2D = new Point2D(0, 0),\n    heading: Point2D = new Point2D(0, 0),\n  ) {\n    this.position = position;\n    this.heading = heading;\n  }\n\n\n  setupFrame(step: number, boardRatio: number): Peg {\n    this._step = step;\n    this._boardRatio = boardRatio;\n\n    return this;\n  }\n\n  turn(direction: Point2D): Peg {\n    this.heading = direction.normalize(this.headingLength());\n\n    return this;\n  }\n\n  turnWithMax(direction: Point2D, maxTurnRate: number): Peg {\n    const angle: number = this.heading.angleDeg(direction);\n    const maxTurnAngle: number = this.step * maxTurnRate / 1000;\n\n    if (angle > maxTurnAngle) {\n      return this.turn(\n        this.heading.interpolate(\n          direction.normalize(this.headingLength()),\n          maxTurnAngle / angle,\n        )\n      );\n    } else {\n      return this.turn(direction);\n    }\n  }\n\n  executeMovement(): Peg {\n    this.position =\n      this.position.add(\n        new Point2D(this.step * this.heading.x, this.step * this.heading.y),\n      );\n\n    return this;\n  }\n\n  bounceOfWalls(): Peg {\n    if ((this.position.x < 0 && this.heading.x < 0) ||\n        (this.position.x > 1 && this.heading.x > 0)) {\n      this.heading = this.heading.mirrorVertical();\n    }\n\n    if ((this.position.y < 0 && this.heading.y < 0) ||\n        (this.position.y > this.boardRatio && this.heading.y > 0)) {\n      this.heading = this.heading.mirrorHorizontal();\n    }\n\n    return this;\n  }\n\n\n  private get step(): number { return this._step; }\n  private get boardRatio(): number { return this._boardRatio; }\n\n  private headingLength(): number {\n    return this._headingLength || (this._headingLength = this.heading.length());\n  }\n}\n","import BrowserWindow from \"../browser-window\";\nimport Point2D from \"../geometry/point2d\";\n\nexport default class Sprite {\n  private htmlElement: HTMLElement;\n  private dimensions: Point2D;\n\n  constructor(\n    parentElement: HTMLElement,\n    cssClass: string,\n    dimensions: Point2D,\n  ) {\n    this.dimensions = dimensions;\n    this.htmlElement = document.createElement('div');\n    this.htmlElement.className = cssClass;\n\n    this.htmlElement.style.position = 'absolute';\n    this.htmlElement.style.top = '0';\n    this.htmlElement.style.left = '0';\n\n    parentElement.appendChild(this.htmlElement);\n  }\n\n  render(\n    browserWindow: BrowserWindow,\n    position: Point2D,\n    heading: Point2D = null,\n  ) {\n    const screenX: number =\n      (position.x - this.dimensions.x / 2) * browserWindow.viewportWidth;\n    const screenY: number =\n      browserWindow.viewportHeight -\n        ((position.y + this.dimensions.y / 2) * browserWindow.viewportWidth);\n    const rotation: number = heading ? -heading.orientationDeg() : 0;\n    const scale: number =\n      (this.dimensions.x * browserWindow.viewportWidth) /\n        this.htmlElement.clientWidth;\n\n    this.htmlElement.style.transform =\n      `translate(${screenX}px, ${screenY}px)\n       rotate(${rotation}deg)\n       scale(${scale}, ${scale})`;\n  }\n}\n","import World from \"../world\";\nimport Point2D from \"../geometry/point2d\";\nimport { Item } from \"../interfaces\";\n\nexport default class FlockAI {\n  private _world: World;\n  private _item: Item;\n  private _tag: String;\n\n  private _quadCohesionDistance: number;\n  private _cohesionWeight: number;\n  private _quadAlignmentDistance: number;\n  private _alignmentWeight: number;\n  private _quadSeparationDistance: number;\n  private _separationWeight: number;\n\n  constructor(\n    world: World,\n    item: Item,\n    tag: String,\n    {\n      cohesionDistance = 0.2,\n      cohesionWeight = 1,\n      alignmentDistance = 0.1,\n      alignmentWeight = 2,\n      separationDistance = 0.01,\n      separationWeight = 4,\n    }: {\n      cohesionDistance?: number,\n      cohesionWeight?: number,\n      alignmentDistance?: number,\n      alignmentWeight?: number,\n      separationDistance?: number,\n      separationWeight?: number,\n    } = {},\n  ) {\n    this._world = world;\n    this._item = item;\n    this._tag = tag;\n\n    this._quadCohesionDistance = cohesionDistance * cohesionDistance;\n    this._cohesionWeight = cohesionWeight;\n    this._quadAlignmentDistance = alignmentDistance * alignmentDistance;\n    this._alignmentWeight = alignmentWeight,\n    this._quadSeparationDistance = separationDistance * separationDistance;\n    this._separationWeight = separationWeight;\n  }\n\n  direction(): Point2D {\n    const position = this._item.peg.position;\n    const heading = this._item.peg.heading;\n\n    let cohesionNeighborCount: number = 1;\n    let cohesionPosition: Point2D = position;\n\n    let alignmentNeighborCount: number = 1;\n    let alignmentHeading: Point2D = heading;\n\n    let separationNeighborCount: number = 0;\n    let separationPosition: Point2D = new Point2D(0, 0);\n\n    for (const item of this._world.getItems(this._tag)) {\n      if (item === this._item) continue;\n      const quadDistance = position.quadDistance(item.peg.position)\n\n      if (quadDistance > this._quadCohesionDistance) continue;\n      ++cohesionNeighborCount;\n      cohesionPosition = cohesionPosition.add(item.peg.position);\n\n      if (quadDistance > this._quadAlignmentDistance) continue;\n      ++alignmentNeighborCount;\n      alignmentHeading = alignmentHeading.add(item.peg.heading);\n\n      if (quadDistance > this._quadSeparationDistance) continue;\n      ++separationNeighborCount;\n      separationPosition =\n        separationPosition.add(\n          item.peg.position.substract(position)\n        );\n    }\n\n    const cohesionDirection: Point2D =\n      cohesionNeighborCount > 1\n        ? cohesionPosition\n            .divide(cohesionNeighborCount)\n            .substract(position)\n            .normalize(this._cohesionWeight)\n        : heading.normalize(1);\n    const alignmentDirection: Point2D =\n      alignmentNeighborCount > 2\n        ? alignmentHeading\n            .divide(alignmentNeighborCount)\n            .normalize(this._alignmentWeight)\n        : heading.normalize(1);\n    const separationDirection: Point2D =\n      separationNeighborCount > 0\n        ? separationPosition\n            .divide(separationNeighborCount)\n            .negate()\n            .normalize(this._separationWeight)\n        : heading.normalize(1);\n\n    return cohesionDirection\n      .add(alignmentDirection)\n      .add(separationDirection);\n  }\n}\n","import World from \"../world\";\nimport { Item } from \"../interfaces\";\nimport Point2D from \"../geometry/point2d\";\n\nexport default class EscapeNearestAI {\n  private _world: World;\n  private _item: Item;\n  private _tag: String;\n\n  private _quadEscapeDistance: number;\n  private _escapeWeight: number;\n\n  constructor(\n    world: World,\n    item: Item,\n    tag: String,\n    {\n      escapeDistance = 0.1,\n      escapeWeight = 16,\n    }: {\n      escapeDistance?: number,\n      escapeWeight?: number,\n    } = {},\n  ) {\n    this._world = world;\n    this._item = item;\n    this._tag = tag;\n    this._quadEscapeDistance = escapeDistance * escapeDistance;\n    this._escapeWeight = escapeWeight;\n  }\n\n  direction(): [Point2D, boolean] {\n    const position: Point2D = this._item.peg.position;\n    const hunters: Array<Item> = this._world.getItems(this._tag);\n\n    let nearestDistance: number = 1;\n    let nearestHunter: Item = null;\n\n    let escapeDirection: Point2D = null;\n    let escapeMode: boolean = false;\n\n    for (const hunter of hunters) {\n      const distance: number = position.quadDistance(hunter.peg.position);\n      if (distance < nearestDistance) {\n        nearestDistance = distance;\n        nearestHunter = hunter;\n      }\n    }\n\n    if (nearestDistance < this._quadEscapeDistance) {\n      escapeMode = true;\n      escapeDirection =\n        nearestHunter.peg.position\n          .substract(position)\n          .negate()\n          .normalize(this._escapeWeight);\n    } else {\n      escapeDirection = this._item.peg.heading;\n    }\n\n    return [escapeDirection, escapeMode];\n  }\n}\n","import { Item } from '../engine/interfaces';\n\nimport BrowserWindow from '../engine/browser-window';\nimport Point2D from '../engine/geometry/point2d';\nimport Peg from '../engine/physics/peg';\nimport Sprite from '../engine/view/sprite';\nimport World from '../engine/world';\nimport FlockAI from '../engine/ai/flock_ai';\nimport EscapeNearestAI from '../engine/ai/escape_nearest_ai';\n\nexport default class Bird implements Item {\n  public peg: Peg;\n  public sprite: Sprite;\n\n  private _world: World;\n  private _flockAI: FlockAI;\n  private _escapeAI: EscapeNearestAI;\n  private _turnTo: Point2D;\n  private _escapeMode: boolean;\n\n  constructor(world: World) {\n    this._world = world;\n    this._flockAI = new FlockAI(world, this, 'bird');\n    this._escapeAI = new EscapeNearestAI(world, this, 'hunter');\n\n    this.peg =\n      new Peg(\n        new Point2D(Math.random(), Math.random()),\n        new Point2D(Math.random() - 0.5, Math.random() - 0.5).normalize(0.0002),\n      );\n\n    this.sprite =\n      new Sprite(document.documentElement, 'bird', new Point2D(0.005, 0.005));\n  }\n\n  plan(): void {\n    const [escapeDirection, escapeMode]: [Point2D, boolean] =\n      this._escapeAI.direction();\n\n    this._turnTo = this._flockAI.direction().add(escapeDirection);\n    this._escapeMode = escapeMode;\n  }\n\n  move(step: number, boardRatio: number): void {\n    const maxTurnRate: number = this._escapeMode ? 1020 : 360;\n\n    this.peg\n      .setupFrame(step, boardRatio)\n      .turnWithMax(this._turnTo, maxTurnRate)\n      .executeMovement()\n      .bounceOfWalls();\n  }\n\n  render(browserWindow: BrowserWindow): void {\n    this.sprite.render(browserWindow, this.peg.position, this.peg.heading);\n  }\n}\n","import World from \"../world\";\nimport Point2D from \"../geometry/point2d\";\nimport { Item } from \"../interfaces\";\n\nexport default class TurnToThreeNearestAI {\n  private _world: World;\n  private _item: Item;\n  private _tag: String;\n\n  constructor(world: World, item: Item, tag: String) {\n    this._world = world;\n    this._item = item;\n    this._tag = tag;\n  }\n\n  direction(): Point2D {\n    const position: Point2D = this._item.peg.position;\n    const items: Array<Item> = this._world.getItems(this._tag);\n\n    let nearestDistance: number = 1;\n    let nearestItem: Item = null;\n\n    let secondNearestDistance: number = 1.1;\n    let secondNearestItem: Item = null;\n\n    let thirdNearestDistance: number = 1.2;\n    let thirdNearestItem: Item = null;\n\n    for (const item of items) {\n      const distance: number = position.quadDistance(item.peg.position);\n      if (distance < thirdNearestDistance) {\n        if (distance < secondNearestDistance) {\n          if (distance < nearestDistance) {\n            thirdNearestDistance = secondNearestDistance;\n            thirdNearestItem = secondNearestItem;\n            secondNearestDistance = nearestDistance;\n            nearestDistance = distance;\n            secondNearestItem = nearestItem;\n            nearestItem = item;\n          } else {\n            thirdNearestDistance = secondNearestDistance;\n            thirdNearestItem = secondNearestItem;\n            secondNearestDistance = distance;\n            secondNearestItem = item;\n          }\n        } else {\n          thirdNearestDistance = distance;\n          thirdNearestItem = item;\n        }\n      }\n    }\n\n    return Point2D\n      .center([\n        nearestItem.peg.position,\n        secondNearestItem.peg.position,\n        thirdNearestItem.peg.position,\n      ])\n      .substract(position);\n  }\n}\n","import { Item } from '../engine/interfaces';\n\nimport BrowserWindow from '../engine/browser-window';\nimport Point2D from '../engine/geometry/point2d';\nimport Peg from '../engine/physics/peg';\nimport Sprite from '../engine/view/sprite';\nimport World from '../engine/world';\nimport TurnToThreeNearestAI from '../engine/ai/turn_to_three_nearest_ai';\n\nexport default class Hunter implements Item {\n  public peg: Peg;\n  public sprite: Sprite;\n\n  private _world: World;\n  private _followAI: TurnToThreeNearestAI;\n  private _turnTo: Point2D;\n\n  constructor(world: World) {\n    this._world = world;\n    this._followAI = new TurnToThreeNearestAI(world, this, 'bird');\n\n    this.peg =\n      new Peg(\n        new Point2D(Math.random(), Math.random()),\n        new Point2D(Math.random() - 0.5, Math.random() - 0.5).normalize(0.0003),\n      );\n\n    this.sprite =\n      new Sprite(document.documentElement, 'hunter', new Point2D(0.02, 0.02));\n  }\n\n  plan(): void {\n    this._turnTo = this._followAI.direction();\n  }\n\n  move(step: number, boardRatio: number): void {\n    this.peg\n      .setupFrame(step, boardRatio)\n      .turnWithMax(this._turnTo, 360)\n      .executeMovement()\n      .bounceOfWalls();\n  }\n\n  render(browserWindow: BrowserWindow): void {\n    this.sprite.render(browserWindow, this.peg.position, this.peg.heading);\n  }\n}\n","import Engine from './engine';\nimport Bird from './flock/bird';\nimport Hunter from './flock/hunter';\n\nconst engine: Engine = new Engine();\n\nfor (let i = 0; i < 100; ++i) engine.spawn(Bird, ['bird']);\nengine.spawn(Hunter, ['hunter']);\nengine.spawn(Hunter, ['hunter']);\nengine.start();\n"]}